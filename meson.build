
project('freeciv', 'c', meson_version: '>= 0.44.0')

if not get_option('ack_experimental')
  error('Autotools are still the only fully supported way to build freeciv.\nSet configure option "ack_experimental" to true if you really want to do experimental meson build.')
endif

priv_conf_data = configuration_data()
pub_conf_data = configuration_data()

pub_conf_data.set('FREECIV_AI_MOD_LAST', 3)
priv_conf_data.set('LOCALEDIR',
                   join_paths(get_option('prefix'),
                              get_option('datadir'), 'locale'))
priv_conf_data.set('BINDIR',
                   join_paths(get_option('prefix'), get_option('bindir')))

priv_conf_data.set('FREECIV_STORAGE_DIR', '~/.freeciv')
pub_conf_data.set('FREECIV_STORAGE_DIR', '~/.freeciv')
priv_conf_data.set('DATADIR',
                   join_paths(get_option('prefix'), get_option('datadir')))
priv_conf_data.set('DATASUBDIR', 'dev')

priv_conf_data.set('IS_DEVEL_VERSION', 1)

if get_option('debug')
  priv_conf_data.set('FREECIV_DEBUG', 1)
  pub_conf_data.set('FREECIV_DEBUG', 1)
endif

priv_conf_data.set('AUDIO_SDL', 1)
priv_conf_data.set('AUDIO_SDL2', 1)

c_compiler = meson.get_compiler('c')

pub_headers = [
  'locale.h',
  'libintl.h',
  'inttypes.h',
  'stdint.h',
  'ws2tcpip.h',
  'sys/types.h',
  'unistd.h',
  'sys/time.h',
  'sys/socket.h',
  'sys/select.h',
  'netinet/in.h',
  'dirent.h',
  'stdbool.h'
  ]

priv_headers = [
  'arpa/inet.h',
  'bzlib.h',
  'direct.h',
  'dlfcn.h',
  'execinfo.h',
  'fcntl.h',
  'libcharset.h',
  'libgen.h',
  'lzma.h',
  'memory.h',
  'netdb.h',
  'pwd.h',
  'signal.h',
  'stdlib.h',
  'strings.h',
  'string.h',
  'sys/file.h',
  'sys/ioctl.h',
  'sys/signal.h',
  'sys/stat.h',
  'sys/termio.h',
  'sys/uio.h',
  'sys/utsname.h',
  'sys/wait.h',
  'termios.h',
  'vfork.h'
  ]

foreach hdr : pub_headers
  if c_compiler.has_header(hdr)
    pub_conf_data.set('FREECIV_HAVE_' + hdr.underscorify().to_upper(), 1)
    priv_conf_data.set('HAVE_' + hdr.underscorify().to_upper(), 1)
  endif
endforeach

foreach hdr : priv_headers
  if c_compiler.has_header(hdr)
    priv_conf_data.set('HAVE_' + hdr.underscorify().to_upper(), 1)
  endif
endforeach

priv_functions = [
  'fork',
  'vfork',
  'backtrace',
  'bind',
  'connect',
  'fdopen',
  'fileno',
  'flock',
  'ftime',
  'getaddrinfo',
  'gethostbyname',
  'getline',
  'getnameinfo',
  'getpwuid',
  'gmtime_r',
  'inet_aton',
  'inet_ntop',
  'inet_pton',
  'localtime_r',
  'opendir',
  'pclose',
  'popen',
  'putenv',
  'select',
  'setenv',
  'snooze',
  'strcasecoll',
  'strcasestr',
  'strcoll',
  'strerror',
  'stricoll',
  'strstr',
  'uname',
  'usleep',
  'vprintf',
  'vsnprintf',
  '_longjmp',
  '_mkdir',
  '_setjmp',
  '_strcoll',
  '_stricoll'
  ]

foreach func : priv_functions
  if c_compiler.has_function(func)
    priv_conf_data.set('HAVE_' + func.underscorify().to_upper(), 1)
  endif
endforeach

configure_file(input : 'gen_headers/meson_fc_config.h.in',
               output : 'fc_config.h',
               configuration: priv_conf_data)
configure_file(input : 'gen_headers/meson_freeciv_config.h.in',
               output : 'freeciv_config.h',
               configuration: pub_conf_data)

add_global_arguments('-DHAVE_CONFIG_H',
                     language: 'c')

common_inc = include_directories('dependencies/lua-5.4/src',
  'dependencies/tolua-5.2/include', 'dependencies/cvercmp',
  'utility', 'common', 'common/networking', 'common/scriptcore',
  'common/aicore')

server_inc = [common_inc, include_directories('server', 'server/advisors',
              'server/scripting', 'server/generator', 'server/savegame',
              'ai', 'ai/classic')]

client_inc = [common_inc, include_directories('client', 'client/include',
              'client/luascript', 'client/agents')]

tool_inc = [server_inc, include_directories('tools/ruleutil', 'tools/shared')]

verhdr = custom_target('verhdr', output: 'version_gen.h',
              command: ['sh', files('gen_headers/generate_version_header.sh'), '@OUTPUT@'],
              depend_files: files('fc_version'))

specenum = custom_target('specenum_gen.h', output: 'specenum_gen.h',
                         command: ['python', files('utility/generate_specenum.py'),
                                   '@OUTPUT@'])

pack_common = custom_target('packets_common', output: ['packets_gen.h',
                                                       'packets_gen.c'],
                            command: ['python', files('common/generate_packets.py'),
                                      '@OUTPUT0@', '@OUTPUT1@', '', '', '', ''],
                            depend_files: files('common/networking/packets.def'))

pack_server = custom_target('packets_server', output: ['hand_gen.h', 'hand_gen.c'],
                            command: ['python', files('common/generate_packets.py'),
                                      '', '', '', '', '@OUTPUT0@', '@OUTPUT1@'],
                            depend_files: files('common/networking/packets.def'))

pack_client = custom_target('packets_client', output: ['packhand_gen.h',
                                                       'packhand_gen.c'],
                            command: ['python', files('common/generate_packets.py'),
                                      '', '', '@OUTPUT0@', '@OUTPUT1@', '', ''],
                            depend_files: files('common/networking/packets.def'))

tolua_cmd = find_program('tolua')

tolua = generator(tolua_cmd,
                  arguments: ['-n', '@BASENAME@',
                              '-o', '@BUILD_DIR@/@BASENAME@_gen.c',
                              '-H', '@BUILD_DIR@/@BASENAME@_gen.h',
                              '@INPUT@'],
                  output: [ '@BASENAME@_gen.c', '@BASENAME@_gen.h'])

tolua_com_a = custom_target('tolua_custom_a',
                            output: ['tolua_common_a_gen.c',
                                     'tolua_common_a_gen.h'],
                            command: [tolua_cmd, '-n', 'common_a',
                                      '-o', '@OUTPUT0@',
                                      '-H', '@OUTPUT1@',
                                      files('common/scriptcore/tolua_common_a.pkg')])

tolua_com_z = custom_target('tolua_custom_z',
                            output: ['tolua_common_z_gen.c',
                                     'tolua_common_z_gen.h'],
                            command: [tolua_cmd, '-n', 'common_z',
                                      '-o', '@OUTPUT0@',
                                      '-H', '@OUTPUT1@',
                                      files('common/scriptcore/tolua_common_z.pkg')])

tolua_game = custom_target('tolua_game',
                           output: ['tolua_game_gen.c',
                                    'tolua_game_gen.h'],
                           command: [tolua_cmd, '-n', 'game',
                                     '-o', '@OUTPUT0@',
                                     '-H', '@OUTPUT1@',
                                     files('common/scriptcore/tolua_game.pkg')])

tolua_signal = custom_target('tolua_signal',
                             output: ['tolua_signal_gen.c',
                                      'tolua_signal_gen.h'],
                             command: [tolua_cmd, '-n', 'signal',
                                       '-o', '@OUTPUT0@',
                                       '-H', '@OUTPUT1@',
                                       files('common/scriptcore/tolua_signal.pkg')])

fc_deps = static_library('fc_dependencies',
  'dependencies/cvercmp/cvercmp.c',
  'dependencies/lua-5.4/src/lapi.c',
  'dependencies/lua-5.4/src/lauxlib.c',
  'dependencies/lua-5.4/src/lbaselib.c',
  'dependencies/lua-5.4/src/lcode.c',
  'dependencies/lua-5.4/src/lcorolib.c',
  'dependencies/lua-5.4/src/lctype.c',
  'dependencies/lua-5.4/src/ldblib.c',
  'dependencies/lua-5.4/src/ldebug.c',
  'dependencies/lua-5.4/src/ldo.c',
  'dependencies/lua-5.4/src/ldump.c',
  'dependencies/lua-5.4/src/lfunc.c',
  'dependencies/lua-5.4/src/lgc.c',
  'dependencies/lua-5.4/src/linit.c',
  'dependencies/lua-5.4/src/liolib.c',
  'dependencies/lua-5.4/src/llex.c',
  'dependencies/lua-5.4/src/lmathlib.c',
  'dependencies/lua-5.4/src/lmem.c',
  'dependencies/lua-5.4/src/loadlib.c',
  'dependencies/lua-5.4/src/lobject.c',
  'dependencies/lua-5.4/src/lopcodes.c',
  'dependencies/lua-5.4/src/loslib.c',
  'dependencies/lua-5.4/src/lparser.c',
  'dependencies/lua-5.4/src/lstate.c',
  'dependencies/lua-5.4/src/lstring.c',
  'dependencies/lua-5.4/src/lstrlib.c',
  'dependencies/lua-5.4/src/ltable.c',
  'dependencies/lua-5.4/src/ltablib.c',
  'dependencies/lua-5.4/src/ltm.c',
  'dependencies/lua-5.4/src/lundump.c',
  'dependencies/lua-5.4/src/lutf8lib.c',
  'dependencies/lua-5.4/src/lvm.c',
  'dependencies/lua-5.4/src/lzio.c',
  'dependencies/tolua-5.2/src/lib/tolua_event.c',
  'dependencies/tolua-5.2/src/lib/tolua_is.c',
  'dependencies/tolua-5.2/src/lib/tolua_map.c',
  'dependencies/tolua-5.2/src/lib/tolua_push.c',
  'dependencies/tolua-5.2/src/lib/tolua_to.c',
  'dependencies/luasql/src/luasql.c',
  'dependencies/luasql/src/ls_sqlite3.c',
  sources: verhdr,
  include_directories : common_inc
  )

common_lib = library('freeciv',
  'utility/astring.c',
  'utility/bitvector.c',
  'utility/bugs.c',
  'utility/capability.c',
  'utility/deprecations.c',
  'utility/distribute.c',
  'utility/fcbacktrace.c',
  'utility/fc_cmdline.c',
  'utility/fc_dirent.c',
  'utility/fciconv.c',
  'utility/fcintl.c',
  'utility/fcthread.c',
  'utility/fc_utf8.c',
  'utility/genhash.c',
  'utility/genlist.c',
  'utility/inputfile.c',
  'utility/ioz.c',
  'utility/iterator.c',
  'utility/log.c',
  'utility/md5.c',
  'utility/mem.c',
  'utility/netfile.c',
  'utility/netintf.c',
  'utility/rand.c',
  'utility/registry.c',
  'utility/registry_ini.c',
  'utility/registry_xml.c',
  'utility/section_file.c',
  'utility/shared.c',
  'utility/string_vector.c',
  'utility/support.c',
  'utility/timing.c',
  'common/aicore/aisupport.c',
  'common/aicore/caravan.c',
  'common/aicore/citymap.c',
  'common/aicore/cm.c',
  'common/aicore/path_finding.c',
  'common/aicore/pf_tools.c',
  'common/networking/connection.c',
  'common/networking/dataio_json.c',
  'common/networking/dataio_raw.c',
  'common/networking/packets.c',
  'common/networking/packets_json.c',
  'common/scriptcore/api_common_intl.c',
  'common/scriptcore/api_common_utilities.c',
  'common/scriptcore/api_game_effects.c',
  'common/scriptcore/api_game_find.c',
  'common/scriptcore/api_game_methods.c',
  'common/scriptcore/api_game_specenum.c',
  'common/scriptcore/api_signal_base.c',
  'common/scriptcore/luascript.c',
  'common/scriptcore/luascript_func.c',
  'common/scriptcore/luascript_signal.c',
  'common/achievements.c',
  'common/actions.c',
  'common/ai.c',
  'common/base.c',
  'common/borders.c',
  'common/calendar.c',
  'common/capstr.c',
  'common/citizens.c',
  'common/city.c',
  'common/clientutils.c',
  'common/combat.c',
  'common/culture.c',
  'common/diptreaty.c',
  'common/disaster.c',
  'common/effects.c',
  'common/events.c',
  'common/extras.c',
  'common/fc_cmdhelp.c',
  'common/fc_interface.c',
  'common/featured_text.c',
  'common/game.c',
  'common/government.c',
  'common/idex.c',
  'common/improvement.c',
  'common/map.c',
  'common/mapimg.c',
  'common/metaknowledge.c',
  'common/movement.c',
  'common/multipliers.c',
  'common/nation.c',
  'common/player.c',
  'common/reqtext.c',
  'common/requirements.c',
  'common/research.c',
  'common/rgbcolor.c',
  'common/road.c',
  'common/server_settings.c',
  'common/spaceship.c',
  'common/specialist.c',
  'common/style.c',
  'common/team.c',
  'common/tech.c',
  'common/terrain.c',
  'common/tile.c',
  'common/traderoutes.c',
  'common/unit.c',
  'common/unitlist.c',
  'common/unittype.c',
  'common/version.c',
  'common/victory.c',
  'common/vision.c',
  'common/workertask.c',
  'common/worklist.c',
  include_directories : common_inc,
  sources: [specenum, pack_common,
            tolua_com_a, tolua_com_z, tolua_game, tolua_signal],
  link_whole: fc_deps,
  dependencies: [c_compiler.find_library('libicuuc'),
                 c_compiler.find_library('m'),
                 c_compiler.find_library('z'),
                 c_compiler.find_library('libcurl'),
                 c_compiler.find_library('libsqlite3'),
                 dependency('threads')],
  install : true
  )

ais = static_library('fc_ai',
  'ai/classic/classicai.c',
  'ai/tex/texai.c',
  'ai/tex/texaicity.c',
  'ai/tex/texaimsg.c',
  'ai/tex/texaiplayer.c',
  'ai/tex/texaiworld.c',
  'ai/default/aiair.c',
  'ai/default/aidata.c',
  'ai/default/aidiplomat.c',
  'ai/default/aiferry.c',
  'ai/default/aiguard.c',
  'ai/default/aihand.c',
  'ai/default/aihunt.c',
  'ai/default/ailog.c',
  'ai/default/aiparatrooper.c',
  'ai/default/aiplayer.c',
  'ai/default/aisettler.c',
  'ai/default/aitech.c',
  'ai/default/aitools.c',
  'ai/default/aiunit.c',
  'ai/default/daicity.c',
  'ai/default/daidiplomacy.c',
  'ai/default/daidomestic.c',
  'ai/default/daieffects.c',
  'ai/default/daimilitary.c',
  include_directories: [server_inc, include_directories('ai/default')]
  )

server_lib = static_library('fc_server',
  'ai/aitraits.c',
  'ai/difficulty.c',
  'ai/handicaps.c',
  'server/advisors/advbuilding.c',
  'server/advisors/advchoice.c',
  'server/advisors/advcity.c',
  'server/advisors/advdata.c',
  'server/advisors/advgoto.c',
  'server/advisors/advruleset.c',
  'server/advisors/advspace.c',
  'server/advisors/advtools.c',
  'server/advisors/autoexplorer.c',
  'server/advisors/autosettlers.c',
  'server/advisors/infracache.c',
  'server/generator/fracture_map.c',
  'server/generator/height_map.c',
  'server/generator/mapgen.c',
  'server/generator/mapgen_topology.c',
  'server/generator/mapgen_utils.c',
  'server/generator/startpos.c',
  'server/generator/temperature_map.c',
  'server/savegame/savecompat.c',
  'server/savegame/savegame2.c',
  'server/savegame/savegame3.c',
  'server/savegame/savemain.c',
  'server/scripting/api_fcdb_auth.c',
  'server/scripting/api_fcdb_base.c',
  'server/scripting/api_server_base.c',
  'server/scripting/api_server_edit.c',
  'server/scripting/api_server_game_methods.c',
  'server/scripting/api_server_luadata.c',
  'server/scripting/api_server_notify.c',
  'server/scripting/script_fcdb.c',
  'server/scripting/script_server.c',
  'server/actiontools.c',
  'server/aiiface.c',
  'server/animals.c',
  'server/auth.c',
  'server/barbarian.c',
  'server/citizenshand.c',
  'server/cityhand.c',
  'server/citytools.c',
  'server/cityturn.c',
  'server/commands.c',
  'server/connecthand.c',
  'server/console.c',
  'server/diplhand.c',
  'server/diplomats.c',
  'server/edithand.c',
  'server/fcdb.c',
  'server/gamehand.c',
  'server/handchat.c',
  'server/infrapts.c',
  'server/maphand.c',
  'server/meta.c',
  'server/mood.c',
  'server/notify.c',
  'server/plrhand.c',
  'server/report.c',
  'server/rscompat.c',
  'server/rssanity.c',
  'server/ruleset.c',
  'server/sanitycheck.c',
  'server/score.c',
  'server/sernet.c',
  'server/settings.c',
  'server/spacerace.c',
  'server/srv_log.c',
  'server/srv_main.c',
  'server/stdinhand.c',
  'server/techtools.c',
  'server/unithand.c',
  'server/unittools.c',
  'server/voting.c',
  include_directories: server_inc,
  sources: [ pack_server,
             tolua.process('server/scripting/tolua_fcdb.pkg',
                           'server/scripting/tolua_server.pkg')]
  )

executable('freeciv-server',
  'server/civserver.c',
  include_directories: server_inc,
  link_with: [server_lib, common_lib, ais],
  dependencies: [c_compiler.find_library('m')],
  install: true
  )


install_data(
  'data/ruledit/comments-3.1.txt',
  install_dir : join_paths(get_option('datadir'), 'freeciv/ruledit')
  )

nations = [
  'abkhaz',
  'aborigines',
  'abyssinian',
  'acadian',
  'acehnese',
  'acrean',
  'afghani',
  'african',
  'ainu',
  'akwe',
  'alandalus',
  'alander',
  'albanian',
  'aleut',
  'algerian',
  'alsatian',
  'amazigh',
  'amazonian',
  'american',
  'andorran',
  'angolan',
  'anhaltian',
  'animals',
  'anishinaabe',
  'antarctican',
  'antiguan',
  'antillean',
  'apache',
  'arab',
  'aragonese',
  'aramean',
  'argentine',
  'armenian',
  'ashanti',
  'assamese',
  'assyrian',
  'asturian',
  'atlantean',
  'australian',
  'austrian',
  'avar',
  'aymara',
  'azeri',
  'aztec',
  'babylonian',
  'badian',
  'bahamian',
  'bahraini',
  'bangladeshi',
  'barbadian',
  'barbarian',
  'bashkir',
  'basque',
  'bavarian',
  'belarusian',
  'belgian',
  'belgic',
  'belizean',
  'bengali',
  'beninese',
  'benin',
  'bhutanese',
  'biafran',
  'bissauguinean',
  'boer',
  'boian',
  'bolivian',
  'bosnia',
  'bosporan',
  'botswanan',
  'brandenburgian',
  'brazilian',
  'breton',
  'british',
  'briton',
  'bruneian',
  'bulgarian',
  'burgundian',
  'burgundic',
  'burkinabe',
  'burmese',
  'burundi',
  'buryat',
  'byzantium',
  'californian',
  'cambodian',
  'cameroonian',
  'canadian',
  'canari',
  'cantonese',
  'capeverdean',
  'carantanian',
  'carthaginian',
  'castilian',
  'catalan',
  'celtiberian',
  'celtic',
  'centralafrican',
  'centralamerican',
  'centrallithuanian',
  'chadian',
  'cham',
  'chananean',
  'chechen',
  'cherokee',
  'chiapanec',
  'chickasaw',
  'chilean',
  'chimu',
  'chinese',
  'chinook',
  'choctaw',
  'chola',
  'chrobatian',
  'chumash',
  'chuvash',
  'circassian',
  'colombian',
  'comanche',
  'comorian',
  'confederate',
  'congolesebrazzaville',
  'congolese',
  'cornish',
  'corsican',
  'cossack',
  'costarican',
  'cree',
  'cretan',
  'crimeantatar',
  'croatian',
  'crusader',
  'cuban',
  'curonian',
  'cuyavian',
  'cypriot',
  'cyrenaican',
  'czechoslovak',
  'czech',
  'dacian',
  'dahomean',
  'danish',
  'darfuri',
  'djiboutian',
  'dominicano',
  'dominican',
  'dryad',
  'dutch',
  'eastgerman',
  'easttimorese',
  'ecuadorian',
  'egyptianarab',
  'egyptian',
  'elamite',
  'emirati',
  'english',
  'epirote',
  'equatoguinean',
  'eritrean',
  'esperant',
  'estonian',
  'ethiopian',
  'etruscan',
  'european',
  'evenki',
  'faroese',
  'fijian',
  'filipino',
  'finnish',
  'flemish',
  'florentine',
  'formosan',
  'franconian',
  'frankish',
  'french',
  'frisian',
  'friulian',
  'fulani',
  'gabonese',
  'gaelic',
  'galician',
  'gallic',
  'gambian',
  'genoese',
  'georgian',
  'gepid',
  'germanbelgian',
  'germanic',
  'german',
  'ghanaian',
  'ghana',
  'ghaznavid',
  'gokturk',
  'goldenhorde',
  'gothic',
  'greaterpolish',
  'greek',
  'greenlander',
  'grenadian',
  'guanche',
  'guarani',
  'guatemalan',
  'guinean',
  'gupta',
  'guyanese',
  'hacker',
  'haitian',
  'hanoverian',
  'han',
  'hansa',
  'hasinay',
  'hawaiian',
  'hellenic',
  'helvetian',
  'hephthalite',
  'hessian',
  'himyarite',
  'hittite',
  'holyroman',
  'holysee',
  'honduran',
  'hopi',
  'hungarian',
  'hunnic',
  'iberian',
  'icelandic',
  'illyrian',
  'inca',
  'indian',
  'indoeuropean',
  'indonesian',
  'inuit',
  'iranian',
  'iraqi',
  'irish',
  'iroquois',
  'israeli',
  'israelite',
  'italiangreek',
  'italian',
  'ivoirian',
  'jaffna',
  'jamaican',
  'japanese',
  'jolof',
  'jordanian',
  'kalmyk',
  'kanem-bornu',
  'karabakhi',
  'karelian',
  'karen',
  'kashmiri',
  'kashubian',
  'katangan',
  'kazakh',
  'kenyan',
  'khazar',
  'khmer',
  'khoisan',
  'khwarezmian',
  'kiribati',
  'kittitian',
  'komi',
  'kongo',
  'korean',
  'kosovar',
  'kuna',
  'kurd',
  'kushan',
  'kuwaiti',
  'kyrgyz',
  'langobardic',
  'lankese',
  'laotian',
  'latin',
  'latvian',
  'lebanese',
  'lendian',
  'leonese',
  'lesothoan',
  'liberian',
  'liburnian',
  'libyan',
  'liechtensteiner',
  'ligurian',
  'lipkatatar',
  'lippe',
  'lithuanian',
  'lojbanistani',
  'lorrain',
  'luwian',
  'luxembourgish',
  'lycian',
  'maasai',
  'macedonian',
  'macedon',
  'majapahit',
  'malagasy',
  'malawian',
  'malaysian',
  'maldivian',
  'malian',
  'mali',
  'maltese',
  'mamluk',
  'manchu',
  'manx',
  'maori',
  'mapuche',
  'marathi',
  'marshallese',
  'martian',
  'mauritanian',
  'mauritian',
  'mayan',
  'mazovian',
  'mecklenburgian',
  'median',
  'messapian',
  'metis',
  'mexican',
  'miao',
  'micronesian',
  'mikmaq',
  'milanese',
  'miskito',
  'mitanni',
  'mixtec',
  'moldovan',
  'moluccan',
  'monegasque',
  'mongol',
  'mon',
  'montenegrin',
  'moravian',
  'mordvin',
  'moroccan',
  'mozambican',
  'mughal',
  'muscovite',
  'muskogee',
  'mwiska',
  'namibian',
  'nauruan',
  'navajo',
  'neapolitan',
  'nenets',
  'nepali',
  'nestorian',
  'newfoundland',
  'newzealand',
  'nicaraguan',
  'nigerian',
  'nigerien',
  'nimiipuu',
  'norman',
  'northkorean',
  'northumbrian',
  'norwegian',
  'novgorodian',
  'nubian',
  'numidian',
  'nuu-chah-nulth',
  'occitan',
  'ohlone',
  'oldenburgian',
  'oldprussian',
  'omani',
  'ossetian',
  'ostrogothic',
  'otomi',
  'ottoman',
  'ozite',
  'paeonian',
  'pakistani',
  'palatinate',
  'palestinian',
  'palmyrene',
  'panamanian',
  'papuanewguinean',
  'papuan',
  'paraguayan',
  'parthian',
  'pashtun',
  'pelasgian',
  'persian',
  'peruvian',
  'phoenician',
  'phrygian',
  'pictish',
  'piedmontese',
  'pirate',
  'polish',
  'polynesian',
  'pontic',
  'portuguese',
  'prussian',
  'puertorican',
  'purhepecha',
  'qatari',
  'quebecois',
  'rapanui',
  'raramuri',
  'rhenish',
  'riffian',
  'riograndense',
  'romanian',
  'roman',
  'romansh',
  'russian',
  'rusyn',
  'ruthenian',
  'rwandan',
  'ryukyuan',
  'sabine',
  'sahrawi',
  'saintlucian',
  'saka',
  'salishan',
  'salvadoran',
  'sami',
  'sammarinese',
  'samnite',
  'samoan',
  'samogitian',
  'santomean',
  'sardinian',
  'sarmatian',
  'saudi',
  'savoyard',
  'saxon',
  'scanian',
  'schleswig-holsteinian',
  'scottishgaelic',
  'scottish',
  'scythian',
  'seleucid',
  'seljuk',
  'seminole',
  'senegalese',
  'serbian',
  'seychellois',
  'shan',
  'shawnee',
  'sherpa',
  'siberian',
  'sicilian',
  'sierraleonean',
  'sikh',
  'sikkimese',
  'silesian',
  'singaporean',
  'singlebarbarian',
  'sinhalese',
  'sioux',
  'slavic',
  'slovakian',
  'slovenian',
  'solomonislander',
  'somaliland',
  'somali',
  'songhai',
  'sorbian',
  'sotho',
  'southafrican',
  'southamerican',
  'southkorean',
  'southsudanese',
  'southvietnamese',
  'southyemeni',
  'soviet',
  'spanish',
  'srivijaya',
  'sudanese',
  'suebian',
  'sumerian',
  'surinamese',
  'swahili',
  'swazi',
  'swedish',
  'swiss',
  'syrian',
  'tahitian',
  'taino',
  'tairona',
  'taiwanese',
  'tajik',
  'tanganyikan',
  'tanzanian',
  'tatar',
  'templar',
  'teutonic',
  'texan',
  'thai',
  'thracian',
  'thuringian',
  'tibetan',
  'timurid',
  'tocharian',
  'togolese',
  'toltec',
  'tongan',
  'transnistrian',
  'transylvanian',
  'trinidadian',
  'tswana',
  'tuareg',
  'tunisian',
  'tupi',
  'turkishcypriot',
  'turkmen',
  'turk',
  'tuvan',
  'tyrolian',
  'ugandan',
  'ukrainian',
  'un',
  'urartian',
  'uruguayan',
  'uyghur',
  'uzbek',
  'vampire',
  'vandalic',
  'vanuatuan',
  'vedic',
  'veletian',
  'venda',
  'venetian',
  'venetic',
  'venezuelan',
  'vermont',
  'vietnamese',
  'viking',
  'vincentian',
  'visigothic',
  'vistulan',
  'volapuk',
  'volgabulgar',
  'volgagerman',
  'walloon',
  'welsh',
  'werewolf',
  'westernpomeranian',
  'westernroman',
  'westindian',
  'westphalian',
  'wuerttembergian',
  'xhosa',
  'xiongnu',
  'yakut',
  'yemeni',
  'yucatecan',
  'yugoslav',
  'zambian',
  'zanzibari',
  'zapotec',
  'zhuang',
  'zimbabwean',
  'zulu'
  ]

if get_option('clients') != []

client_common = static_library('fc_client_common',
  'client/agents/agents.c',
  'client/agents/cma_core.c',
  'client/agents/cma_fec.c',
  'client/agents/sha.c',
  'client/luascript/api_client_base.c',
  'client/luascript/script_client.c',
  'client/attribute.c',
  'client/audio.c',
  'client/audio_none.c',
  'client/audio_sdl.c',
  'client/chatline_common.c',
  'client/citydlg_common.c',
  'client/cityrepdata.c',
  'client/client_main.c',
  'client/climap.c',
  'client/climisc.c',
  'client/clinet.c',
  'client/colors_common.c',
  'client/connectdlg_common.c',
  'client/control.c',
  'client/editor.c',
  'client/global_worklist.c',
  'client/goto.c',
  'client/helpdata.c',
  'client/luaconsole_common.c',
  'client/mapctrl_common.c',
  'client/mapview_common.c',
  'client/messagewin_common.c',
  'client/music.c',
  'client/options.c',
  'client/overview_common.c',
  'client/packhand.c',
  'client/plrdlg_common.c',
  'client/repodlgs_common.c',
  'client/reqtree.c',
  'client/servers.c',
  'client/text.c',
  'client/themes_common.c',
  'client/tilespec.c',
  'client/unitselect_common.c',
  'client/update_queue.c',
  'client/voteinfo.c',
  'client/zoom.c',
  sources: [pack_client,
            tolua.process('client/luascript/tolua_client.pkg')],
  include_directories: client_inc,
  link_with: [common_lib],
  dependencies: [c_compiler.find_library('m'),
                 c_compiler.find_library('libSDL2'),
                 c_compiler.find_library('libSDL2_mixer')]
  )

install_data('data/helpdata.txt',
             'data/hexemplio.tilespec',
             'data/stdmusic.musicspec',
             install_dir : join_paths(get_option('datadir'), 'freeciv'))

install_data('data/misc/colors.tilespec',
             'data/misc/intro.png',
             'data/misc/overlays.png',
             'data/misc/overlays.spec',
             'data/misc/citybar.png',
             'data/misc/citybar.spec',
             'data/misc/small.png',
             'data/misc/small.spec',
             'data/misc/governments.png',
             'data/misc/governments.spec',
             'data/misc/specialists.png',
             'data/misc/specialists.spec',
             'data/misc/events.png',
             'data/misc/events.spec',
             'data/misc/buildings-large.spec',
             'data/misc/wonders-large.spec',
             'data/misc/flags-large.spec',
             'data/misc/shields-large.spec',
             'data/misc/cursors.png',
             'data/misc/cursors.spec',
             'data/misc/space.png',
             'data/misc/space.spec',
             'data/misc/techs.png',
             'data/misc/techs.spec',
             'data/misc/treaty.png',
             'data/misc/treaty.spec',
             'data/misc/icons.spec',
             'data/misc/editor.png',
             'data/misc/editor.spec',
             'data/misc/civicon.png',
             'data/misc/cityicon.png',
             install_dir : join_paths(get_option('datadir'), 'freeciv/misc'))

install_data('data/buildings/airport.png',
             'data/buildings/aqueduct.png',
             'data/buildings/bank.png',
             'data/buildings/barracks_iii.png',
             'data/buildings/barracks_ii.png',
             'data/buildings/barracks_i.png',
             'data/buildings/capitalization.png',
             'data/buildings/cathedral.png',
             'data/buildings/city_walls.png',
             'data/buildings/coastal_defense.png',
             'data/buildings/colosseum.png',
             'data/buildings/courthouse.png',
             'data/buildings/ecclesiastical_palace.png',
             'data/buildings/factory.png',
             'data/buildings/granary.png',
             'data/buildings/harbor.png',
             'data/buildings/hydro_plant.png',
             'data/buildings/library.png',
             'data/buildings/marketplace.png',
             'data/buildings/mass_transit.png',
             'data/buildings/mfg_plant.png',
             'data/buildings/nuclear_plant.png',
             'data/buildings/offshore_platform.png',
             'data/buildings/palace.png',
             'data/buildings/police_station.png',
             'data/buildings/port_facility.png',
             'data/buildings/power_plant.png',
             'data/buildings/recycling_center.png',
             'data/buildings/research_lab.png',
             'data/buildings/sam_battery.png',
             'data/buildings/sdi_defense.png',
             'data/buildings/sewer_system.png',
             'data/buildings/solar_plant.png',
             'data/buildings/space_component.png',
             'data/buildings/space_modules.png',
             'data/buildings/space_structural.png',
             'data/buildings/stock_exchange.png',
             'data/buildings/super_highways.png',
             'data/buildings/supermarket.png',
             'data/buildings/temple.png',
             'data/buildings/university.png',
             install_dir : join_paths(get_option('datadir'),
                                      'freeciv/buildings'))

install_data('data/wonders/apollo_program.png',
             'data/wonders/asmiths_trading_co.png',
             'data/wonders/colossus.png',
             'data/wonders/copernicus_observatory.png',
             'data/wonders/cure_for_cancer.png',
             'data/wonders/darwins_voyage.png',
             'data/wonders/eiffel_tower.png',
             'data/wonders/great_library.png',
             'data/wonders/great_wall.png',
             'data/wonders/hanging_gardens.png',
             'data/wonders/hoover_dam.png',
             'data/wonders/internet.png',
             'data/wonders/isaac_newtons_college.png',
             'data/wonders/js_bachs_cathedral.png',
             'data/wonders/king_richards_crusade.png',
             'data/wonders/leonardos_workshop.png',
             'data/wonders/lighthouse.png',
             'data/wonders/magellans_expedition.png',
             'data/wonders/manhattan_project.png',
             'data/wonders/marco_polos_embassy.png',
             'data/wonders/mausoleum_of_halicarnassus.png',
             'data/wonders/michelangelos_chapel.png',
             'data/wonders/oracle.png',
             'data/wonders/pyramids.png',
             'data/wonders/seti_program.png',
             'data/wonders/shakespeares_theatre.png',
             'data/wonders/statue_of_liberty.png',
             'data/wonders/statue_of_zeus.png',
             'data/wonders/sun_tzus_war_academy.png',
             'data/wonders/temple_of_artemis.png',
             'data/wonders/united_nations.png',
             'data/wonders/womens_suffrage.png',
             install_dir : join_paths(get_option('datadir'),
                                      'freeciv/wonders'))

install_data('data/override/flags-large.spec',
             'data/override/shields-large.spec',
             install_dir : join_paths(get_option('datadir'), 'freeciv/override'))

install_data('data/hexemplio/activities.png',
             'data/hexemplio/activities.spec',
             'data/hexemplio/bases.png',
             'data/hexemplio/bases.spec',
             'data/hexemplio/cities.png',
             'data/hexemplio/cities.spec',
             'data/hexemplio/embellishments.png',
             'data/hexemplio/embellishments.spec',
             'data/hexemplio/forests.png',
             'data/hexemplio/forests.spec',
             'data/hexemplio/grid.png',
             'data/hexemplio/grid.spec',
             'data/hexemplio/hills.png',
             'data/hexemplio/hills.spec',
             'data/hexemplio/mountains.png',
             'data/hexemplio/mountains.spec',
             'data/hexemplio/rivers.png',
             'data/hexemplio/rivers.spec',
             'data/hexemplio/roads-maglevs.png',
             'data/hexemplio/roads-maglevs.spec',
             'data/hexemplio/roads.png',
             'data/hexemplio/roads.spec',
             'data/hexemplio/roads-rails.png',
             'data/hexemplio/roads-rails.spec',
             'data/hexemplio/select.png',
             'data/hexemplio/select.spec',
             'data/hexemplio/terrain.png',
             'data/hexemplio/terrain.spec',
             'data/hexemplio/tiles.png',
             'data/hexemplio/tiles.spec',
             'data/hexemplio/unitcost.png',
             'data/hexemplio/unitcost.spec',
             'data/hexemplio/unitextras.png',
             'data/hexemplio/unitextras.spec',
             'data/hexemplio/water1.png',
             'data/hexemplio/water1.spec',
             'data/hexemplio/water2.png',
             'data/hexemplio/water2.spec',
             'data/hexemplio/water3.png',
             'data/hexemplio/water3.spec',
             install_dir : join_paths(get_option('datadir'), 'freeciv/hexemplio'))

install_data('data/amplio2/units.png',
             'data/amplio2/units.spec',
             'data/amplio2/extra_units.png',
             'data/amplio2/extra_units.spec',
             'data/amplio2/nuke.png',
             'data/amplio2/nuke.spec',
             'data/amplio2/explosions.png',
             'data/amplio2/explosions.spec',
             install_dir : join_paths(get_option('datadir'), 'freeciv/amplio2'))

install_data('data/stdmusic/CullamBruce-Lockhart--Dawning_Fanfare.ogg',
             install_dir : join_paths(get_option('datadir'), 'freeciv/stdmusic'))

endif

gtk322_dep = dependency('gtk+-3.0', version : '>= 3.22')

if get_option('clients').contains('gtk3.22')

executable('freeciv-gtk3.22',
  'client/gui-gtk-3.22/action_dialog.c',
  'client/gui-gtk-3.22/canvas.c',
  'client/gui-gtk-3.22/chatline.c',
  'client/gui-gtk-3.22/choice_dialog.c',
  'client/gui-gtk-3.22/citizensinfo.c',
  'client/gui-gtk-3.22/citydlg.c',
  'client/gui-gtk-3.22/cityrep.c',
  'client/gui-gtk-3.22/cma_fe.c',
  'client/gui-gtk-3.22/colors.c',
  'client/gui-gtk-3.22/connectdlg.c',
  'client/gui-gtk-3.22/dialogs.c',
  'client/gui-gtk-3.22/diplodlg.c',
  'client/gui-gtk-3.22/editgui.c',
  'client/gui-gtk-3.22/editprop.c',
  'client/gui-gtk-3.22/finddlg.c',
  'client/gui-gtk-3.22/gamedlgs.c',
  'client/gui-gtk-3.22/gotodlg.c',
  'client/gui-gtk-3.22/graphics.c',
  'client/gui-gtk-3.22/gui_main.c',
  'client/gui-gtk-3.22/gui_stuff.c',
  'client/gui-gtk-3.22/happiness.c',
  'client/gui-gtk-3.22/helpdlg.c',
  'client/gui-gtk-3.22/infradlg.c',
  'client/gui-gtk-3.22/inputdlg.c',
  'client/gui-gtk-3.22/inteldlg.c',
  'client/gui-gtk-3.22/luaconsole.c',
  'client/gui-gtk-3.22/mapctrl.c',
  'client/gui-gtk-3.22/mapview.c',
  'client/gui-gtk-3.22/menu.c',
  'client/gui-gtk-3.22/messagedlg.c',
  'client/gui-gtk-3.22/messagewin.c',
  'client/gui-gtk-3.22/optiondlg.c',
  'client/gui-gtk-3.22/pages.c',
  'client/gui-gtk-3.22/plrdlg.c',
  'client/gui-gtk-3.22/repodlgs.c',
  'client/gui-gtk-3.22/soundset_dlg.c',
  'client/gui-gtk-3.22/spaceshipdlg.c',
  'client/gui-gtk-3.22/sprite.c',
  'client/gui-gtk-3.22/theme_dlg.c',
  'client/gui-gtk-3.22/themes.c',
  'client/gui-gtk-3.22/tileset_dlg.c',
  'client/gui-gtk-3.22/transportdlg.c',
  'client/gui-gtk-3.22/unitselect.c',
  'client/gui-gtk-3.22/unitselextradlg.c',
  'client/gui-gtk-3.22/unitselunitdlg.c',
  'client/gui-gtk-3.22/voteinfo_bar.c',
  'client/gui-gtk-3.22/wldlg.c',
  include_directories: client_inc,
  dependencies: gtk322_dep,
  link_with: client_common,
  install: true
  )

endif

if get_option('fcmp') != []

fcmp_common = static_library('fcmp_common',
  'tools/fcmp/download.c',
  'tools/fcmp/modinst.c',
  'tools/fcmp/mpcmdline.c',
  'tools/fcmp/mpdb.c',
  include_directories: tool_inc
  )

endif

if get_option('fcmp').contains('gtk3')

executable('freeciv-mp-gtk3',
  'tools/fcmp/mpgui_gtk3.c',
  include_directories: tool_inc,
  dependencies: [gtk322_dep,
                 c_compiler.find_library('libsqlite3')],
  link_with: [common_lib, fcmp_common],
  install: true
  )

endif

if get_option('fcmp').contains('cli')

executable('freeciv-mp-cli',
  'tools/fcmp/mpcli.c',
  include_directories: tool_inc,
  dependencies: [c_compiler.find_library('libsqlite3')],
  link_with: [common_lib, fcmp_common],
  install: true
  )

endif

tool_lib = static_library('fc_toolutil',
  'tools/ruleutil/comments.c',
  'tools/ruleutil/rulesave.c',
  'tools/shared/tools_fc_interface.c',
  include_directories: server_inc
  )

executable('freeciv-ruleup',
  'tools/ruleup.c',
  link_with: [common_lib, server_lib, tool_lib, ais],
  include_directories: tool_inc,
  dependencies: [c_compiler.find_library('m')],
  install: true
  )

executable('freeciv-manual',
  'tools/civmanual.c',
  'client/helpdata.c',
  link_with: [common_lib, server_lib, tool_lib, ais],
  include_directories: [tool_inc,
                        include_directories('client', 'client/include')],
  dependencies: [c_compiler.find_library('m')],
  install: true
  )

install_data(
  'data/default/default.lua',
  'data/default/nationlist.ruleset',
  'data/default/ai_effects.ruleset',
  install_dir : join_paths(get_option('datadir'), 'freeciv/default')
  )

foreach nation : nations
  install_data(
    join_paths('data/nation', nation + '.ruleset'),
    install_dir : join_paths(get_option('datadir'), 'freeciv/nation'))
endforeach

install_data(
  'data/override/nation.ruleset',
  install_dir : join_paths(get_option('datadir'), 'freeciv/override'))

rulesets = [
  'civ2civ3',
  'classic',
  'multiplayer',
  'alien',
  'sandbox',
  'civ1',
  'civ2'
  ]

ruleset_files = [
  'buildings.ruleset',
  'cities.ruleset',
  'effects.ruleset',
  'game.ruleset',
  'governments.ruleset',
  'nations.ruleset',
  'parser.lua',
  'script.lua',
  'styles.ruleset',
  'techs.ruleset',
  'terrain.ruleset',
  'units.ruleset',
  ]

foreach rs : rulesets
  foreach rsf : ruleset_files
    install_data(
      join_paths('data', rs, rsf),
      install_dir : join_paths(get_option('datadir'), 'freeciv', rs)
      )
  endforeach
endforeach

install_data(
  'data/civ2civ3/README.civ2civ3',
  install_dir : join_paths(get_option('datadir'), 'freeciv/civ2civ3')
  )

install_data(
  'data/classic/README.classic',
  install_dir : join_paths(get_option('datadir'), 'freeciv/classic')
  )

install_data(
  'data/multiplayer/README.multiplayer',
  install_dir : join_paths(get_option('datadir'), 'freeciv/multiplayer')
  )

install_data(
  'data/alien/README.alien',
  install_dir : join_paths(get_option('datadir'), 'freeciv/alien')
  )

install_data(
  'data/sandbox/README.sandbox',
  'data/sandbox/luadata.txt',
  install_dir : join_paths(get_option('datadir'), 'freeciv/sandbox')
  )

install_data(
  'COPYING',
  'NEWS',
  'INSTALL',
  'ChangeLog',
  'doc/BUGS',
  'doc/CodingStyle',
  'doc/FAQ',
  'doc/HACKING',
  'doc/HOWTOPLAY',
  'doc/INSTALL.meson',
  'doc/README',
  'doc/README.achievements',
  'doc/README.actions',
  'doc/README.agents',
  'doc/README.AI',
  'doc/README.AI_modules',
  'doc/README.attributes',
  'doc/README.delta',
  'doc/README.effects',
  'doc/README.fcdb',
  'doc/README.governor',
  'doc/README.graphics',
  'doc/README.msys2',
  'doc/README.nations',
  'doc/README.packaging',
  'doc/README.rulesets',
  'doc/README.scenarios',
  'doc/README.scorelog',
  'doc/README.sound',
  'doc/README.tilesets',
  'doc/TODO',
  install_dir : join_paths(get_option('datadir'), 'doc/freeciv')
  )
