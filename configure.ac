dnl configure.ac for freeciv
dnl Process this file with autoconf to produce a configure script.

AC_INIT([Freeciv], m4_esyscmd([./fc_version | tr -d '\n']),
        [https://www.hostedredmine.com/projects/freeciv],
        [freeciv], [http://www.freeciv.org/])
AC_PREREQ(2.65)

dnl Initialize with some random file to ensure the source is here.
AC_CONFIG_SRCDIR([common/game.c])
AC_CONFIG_AUX_DIR(bootstrap) # This can't be quoted or automake will fail
AC_CONFIG_MACRO_DIR([m4])
ifdef([AC_CONFIG_MACRO_DIRS],[AC_CONFIG_MACRO_DIRS([dependencies/m4])])
AC_CONFIG_HEADERS([gen_headers/fc_config.h gen_headers/freeciv_config.h])
AC_CANONICAL_HOST
AC_USE_SYSTEM_EXTENSIONS
AC_C_BIGENDIAN

BUG_URL="$PACKAGE_BUGREPORT"
WIKI_URL="http://www.freeciv.org/"
MAIL_ADDRESS="freeciv-dev AT freelists.org"

AC_DEFINE(FC_CONFIG_H, 1, [Configuration autogenerated])
AC_DEFINE_UNQUOTED([BUG_URL], ["$BUG_URL"], [Bug reporting URL])
AC_DEFINE_UNQUOTED([WIKI_URL], ["$WIKI_URL"], [Informational URL])

AC_DEFINE([DEFAULT_SOCK_PORT], [5556], [Connection TCP Port])
AC_DEFINE([FREECIV_JSON_PORT], [6556], [Json Connection TCP Port]) dnl raw default + 1000

AC_SUBST([BUG_URL])
AC_SUBST([WIKI_URL])
AC_SUBST([MAIL_ADDRESS])

dnl client/server should always have the same major and minor versions
dnl different patch versions are compatible
VERSION_SCRIPT_SILENT=yes
m4_include(fc_version)

AC_ARG_VAR([FREECIV_LABEL_FORCE], [Forced version label format])

AC_DEFINE_UNQUOTED([MAJOR_VERSION], [$MAJOR_VERSION], [Major version])
AC_DEFINE_UNQUOTED([MINOR_VERSION], [$MINOR_VERSION], [Minor version])
AC_DEFINE_UNQUOTED([PATCH_VERSION], [$PATCH_VERSION], [Patch version])
if test x$EMERGENCY_VERSION != x ; then
  AC_DEFINE_UNQUOTED([EMERGENCY_VERSION], [$EMERGENCY_VERSION], [Emergency version])
fi
AC_DEFINE_UNQUOTED([VERSION_LABEL], ["${VERSION_LABEL}"], [Version label])
AC_DEFINE_UNQUOTED([VERSION_STRING], ["${VERSION_STRING}"], [Version string])
AC_DEFINE_UNQUOTED([IS_DEVEL_VERSION], [$IS_DEVEL_VERSION], [Is this a devel version])
AC_DEFINE_UNQUOTED([IS_FREEZE_VERSION], [$IS_FREEZE_VERSION], [Is this a frozen version])
AC_DEFINE_UNQUOTED([IS_BETA_VERSION], [$IS_BETA_VERSION], [Is this a beta version])
AC_DEFINE_UNQUOTED([NEXT_STABLE_VERSION], ["$NEXT_STABLE_VERSION"], [Version number of next release])
AC_DEFINE_UNQUOTED([FREECIV_RELEASE_MONTH], [$RELEASE_MONTH], [Month next version will be released])
AC_SUBST([MAJOR_VERSION])
AC_SUBST([MINOR_VERSION])

AC_DEFINE_UNQUOTED([DATASUBDIR],
                   ["$DATASUBDIR"],
                   [Version specific subdir for default data path])
AC_SUBST([DATASUBDIR])

AC_DEFINE_UNQUOTED([FREECIV_DISTRIBUTOR], ["$FREECIV_DISTRIBUTOR"],
                   [Distribution this freeciv is built for])

dnl Initialize automake stuff
AM_INIT_AUTOMAKE([subdir-objects dist-zip dist-xz])

dnl Use silent rules by default
dnl verbose build using  make V=1
AM_SILENT_RULES([yes])

UTILITY_LIBS=

AC_PROG_MKDIR_P

dnl Sed is needed for the configuration
dnl of the clients, database setting and the mapimg toolkits.
AC_PROG_SED

AC_CACHE_CHECK([for malloc(0) return value], [fc_cv_malloc_zero_ok], [
AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <stdlib.h>

int
main()
{
  void *allocation = malloc(0);

  if (allocation != NULL) {
    free(allocation);
  }

  return (allocation == NULL);
}
]])], [fc_cv_malloc_zero_ok=true], [fc_cv_malloc_zero_ok=false], [fc_cv_malloc_zero_ok=false])])

if test "x$fc_cv_malloc_zero_ok" = "xtrue" ; then
  AC_DEFINE([MALLOC_ZERO_OK], [1], [It's ok to call malloc() for zero bytes])
fi

FC_CHECK_SQLITE3([], [AC_MSG_ERROR([sqlite3 not found])])

dnl set default values
fcdb_all=no
fcdb_mysql=no
fcdb_odbc=no
fcdb_postgres=no
fcdb_sqlite3=no

dnl checks for databases
dnl all:                  Autodetect as many as possible [default].
dnl mysql:                use mysql database
dnl odbc:                 use odbc database
dnl postgres:             use postgres database
dnl comma-separated-list: Detect these or abort.
AC_ARG_ENABLE([fcdb],
  AS_HELP_STRING([--enable-fcdb[=no/all/mysql/odbc/postgres/sqlite3]],
                 [database backends [sqlite3](no, or list)]),
[databases=${enableval}],
[databases=sqlite3])

for db in $(echo $databases | $SED 's/,/ /g') ; do
  if test "x$db" = "xall" ; then
    fcdb_all=yes
  elif test "x$db" = "xno" ; then
    fcdb_all=no
  elif test "x$db" = "xmysql" ; then
    fcdb_mysql=yes
  elif test "x$db" = "xodbc" ; then
    fcdb_odbc=yes
  elif test "x$db" = "xpostgres" ; then
    fcdb_postgres=yes
  elif test "x$db" = "xsqlite3" ; then
    fcdb_sqlite3=yes
  else
    AC_MSG_ERROR([bad value ${db} for --enable-fcdb])
  fi
done

dnl checks for database mysql
dnl sets FCDB_MYSQL(conditional), FCDB_MYSQL_CFLAGS
FC_FCDB_MYSQL

dnl checks for database odbc
dnl sets FCDB_ODBC(conditional), FCDB_ODBC_CFLAGS
FC_FCDB_ODBC

dnl checks for database postgres
dnl sets FCDB_POSTGRES(conditional), FCDB_POSTGRES_CFLAGS
FC_FCDB_POSTGRES

dnl checks for database sqlite3
dnl sets FCDB_SQLITE3(conditional), FCDB_SQLITE3_CFLAGS
FC_FCDB_SQLITE3

dnl check if a database backend is available
if test "x$fcdb_mysql" = "xyes" || test "x$fcdb_odbc" = "xyes" \
   || test "x$fcdb_postgres" = "xyes" || test "x$fcdb_sqlite3" = "xyes"; then
  enable_fcdb=yes
  AC_DEFINE([HAVE_FCDB], [1], [Database backend available])
else
  enable_fcdb=no
fi
AM_CONDITIONAL([FCDB_DB], [test "x$enable_fcdb" = "xyes"])

dnl  no=do not compile server,  yes=compile server,  *=error
AC_ARG_ENABLE([server],
  AS_HELP_STRING([--disable-server], [do not compile the server]),
[case "${enableval}" in
  yes) server=yes ;;
  no)  server=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --disable-server) ;;
esac], [server=yes])
AM_CONDITIONAL(SERVER, test x$server = xyes)

dnl Host type variable defaults
MINGW=no
AMIGA=no

dnl Settings specific to host OS
case "$host_os" in

  *mingw*)
    dnl Windows-specific settings
    MINGW=yes
    FC_WINSOCK2_INCLUDE([AC_DEFINE([FREECIV_HAVE_WINSOCK2], [1], [Mingw-specific setting - winsock2])])
    AC_DEFINE([FREECIV_HAVE_WINSOCK], [1], [Mingw-specific setting - winsock])
    AC_CHECK_HEADERS([ws2tcpip.h], [AC_DEFINE([FREECIV_HAVE_WS2TCPIP_H], [1], [ws2tcpip.h available])])
    AC_CHECK_HEADERS([direct.h])

    dnl Without WINSOCK2, use: LIBS="$LIBS -lwsock32"
    LIBS="${LIBS} -lws2_32"
    ;;
esac

dnl Networking headers
AC_CHECK_HEADERS([sys/types.h], [AC_DEFINE([FREECIV_HAVE_SYS_TYPES_H], [1], [sys/types.h available])])

dnl Avoid including the unix emulation layer if we build mingw executables
dnl There would be type conflicts between winsock and bsd/unix includes
if test "x$MINGW" != "xyes"; then
  AC_CHECK_HEADERS([sys/socket.h], [AC_DEFINE([FREECIV_HAVE_SYS_SOCKET_H], [1], [sys/socket.h available])])
fi

dnl Check getaddrinfo just once here, and remember the result
AC_CHECK_FUNCS([getaddrinfo], [have_getaddrinfo=yes], [
  AC_MSG_CHECKING([getaddrinfo() as a macro])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([
#ifdef FREECIV_HAVE_WS2TCPIP_H
#include <ws2tcpip.h>
#endif], [getaddrinfo(NULL, NULL, NULL, NULL);])], [
  AC_MSG_RESULT([yes])
  have_getaddrinfo=yes
  AC_DEFINE([HAVE_GETADDRINFO])], [AC_MSG_RESULT([no])])])

dnl yes     - Support for IPv6 required
dnl no      - Legacy IPv4 support
dnl test    - Try to enable IPv6 support
AC_ARG_ENABLE([ipv6],
  AS_HELP_STRING([--enable-ipv6=yes/no/test], [use IPv6 [test]]),
[case "${enableval}" in
  yes|no|test) ipv6=${enableval} ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-ipv6) ;;
esac], [ipv6=yes])
if test x$ipv6 != xno ; then
  if test "x$have_getaddrinfo" = "xyes" ; then
    enable_ipv6=yes
    AC_CHECK_FUNCS([inet_pton], [],
       [AC_MSG_CHECKING([inet_pton() as a macro])
      AC_LINK_IFELSE([AC_LANG_PROGRAM([
#ifdef FREECIV_HAVE_WS2TCPIP_H
#include <ws2tcpip.h>
#endif], [inet_pton(0, NULL, NULL);])], [
      AC_MSG_RESULT([yes])], [enable_ipv6=no])])
    AC_CHECK_FUNCS([inet_ntop], [],
       [AC_MSG_CHECKING([inet_ntop() as a macro])
      AC_LINK_IFELSE([AC_LANG_PROGRAM([
#ifdef FREECIV_HAVE_WS2TCPIP_H
#include <ws2tcpip.h>
#endif], [inet_ntop(0, NULL, NULL, 0);])], [
      AC_MSG_RESULT([yes])], [enable_ipv6=no])])
    AC_CHECK_FUNCS([getnameinfo], [],
       [AC_MSG_CHECKING([getnameinfo() as a macro])
      AC_LINK_IFELSE([AC_LANG_PROGRAM([
#ifdef FREECIV_HAVE_WS2TCPIP_H
#include <ws2tcpip.h>
#endif], [getnameinfo(NULL, 0, NULL, 0, NULL, 0, 0);])], [
      AC_MSG_RESULT([yes])], [enable_ipv6=no])])
  else
     enable_ipv6=no
  fi
  if test x$enable_ipv6 = xyes ; then
    AC_MSG_CHECKING([for AF_INET6])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#ifdef FREECIV_HAVE_WINSOCK2
#include <winsock2.h>
#endif
#ifdef FREECIV_HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef FREECIV_HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif]], [[return AF_INET6;]])], [AC_MSG_RESULT([yes])],
       [AC_MSG_RESULT([no])
        enable_ipv6=no])
  fi
  if test x$enable_ipv6 = xno && test x$ipv6 = xyes ; then
    AC_MSG_ERROR([Cannot enable IPv6 functionality. If you want to allow build without IPv6, try --enable-ipv6=test or --disable-ipv6])
  fi
  if test x$enable_ipv6 = xyes ; then
    AC_DEFINE([FREECIV_IPV6_SUPPORT], [1], [IPv6 Support built in])
  fi
fi

AC_ARG_WITH([project-definition],
  AS_HELP_STRING([--with-project-definition=file], [use given project definition file]),
[project_definition="${withval}"
 project_definition_dyn_rel="\$(top_builddir)/${withval}"],
[project_definition="${srcdir}/bootstrap/freeciv.project"
 project_definition_dyn_rel="\$(top_srcdir)/bootstrap/freeciv.project"])

. ${project_definition}

AC_DEFINE_UNQUOTED([FREECIV_META_URL], ["$META_URL"], [Metaserver URL])

if test "x$MODPACK_LIST_URL" != "x" ; then
  AC_DEFINE_UNQUOTED([MODPACK_LIST_URL], ["${MODPACK_LIST_URL}"], [Default modpack list URL])
fi

AC_ARG_WITH([readline],
  AS_HELP_STRING([--with-readline], [support fancy command line editing]),
WITH_READLINE=$withval,	dnl yes/no - required to use / never use
WITH_READLINE="maybe"	dnl maybe  - use if found [default]
)

FOLLOWTAG=${DEFAULT_FOLLOW_TAG}
AC_ARG_WITH([followtag],
  AS_HELP_STRING([--with-followtag], [version tag to follow]),
[FOLLOWTAG=${withval}])
AC_DEFINE_UNQUOTED([FOLLOWTAG], ["${FOLLOWTAG}"], [Version tag to follow])

AC_ARG_WITH([desktopdir],
  AS_HELP_STRING([--with-desktopdir], [install desktop files to given dir]),
[ DESKTOPDIR=${withval} ], [ DESKTOPDIR="\$(prefix)/share/applications" ])
AC_SUBST([DESKTOPDIR])

AC_ARG_WITH([appdatadir],
  AS_HELP_STRING([--with-appdatadir], [install appdata files to given dir]),
[ APPDATADIR=${withval} ], [ APPDATADIR="\$(prefix)/share/appdata" ])
AC_SUBST([APPDATADIR])

dnl try to support this development version's previous save games formats
AC_ARG_ENABLE([dev-save-compat],
  AS_HELP_STRING([--enable-dev-save-compat=yes/no],
                 [enable development version save game compatibility]),
  [case "${enableval}" in
    yes) dev_save_compat=1 ;;
    no) dev_save_compat=0 ;;
    *) AC_MSG_ERROR([bad value ${enableval} for --enable-dev-save-compat]) ;;
  esac],
  [dev_save_compat=$IS_DEVEL_VERSION])
AS_IF([test $dev_save_compat != 0],
      [AC_DEFINE([FREECIV_DEV_SAVE_COMPAT], [1],
                 [Development version save game compatibility])
       AC_DEFINE([FREECIV_DEV_SAVE_COMPAT_3_1], [1],
                 [Development version save game compatibility - 3.1 development])
       AC_DEFINE([FREECIV_DEV_SAVE_COMPAT_3_0], [1],
                 [Development version save game compatibility - 3.0 development])])

dnl set default values
mapimg_all=auto
mapimg_magickwand=no

dnl map images
dnl all:                  Autodetect as many as possible [default].
dnl no:                   No additional toolkits.
dnl magickwand:           compile magickwand (imagemagick) support.
dnl comma-separated-list: Detect these or abort.
AC_ARG_ENABLE([mapimg],
  AS_HELP_STRING([--enable-mapimg=no/auto/magickwand],
                 [additional map image toolkits to compile [auto](no, or list)]),
[toolkits=${enableval}],
[enable_mapimg=auto])

for toolkit in $(echo $toolkits | $SED 's/,/ /g') ; do
  if test "x$toolkit" = "xauto" ; then
    enable_mapimg=auto
  elif test "x$toolkit" = "xno" ; then
    enable_mapimg=no
  else
    enable_mapimg=selected
  fi

  if test "x$toolkit" = "xmagickwand" ; then
    mapimg_magickwand=yes
  fi
done

dnl checks for MagickWand mapimg support
dnl sets MAPIMG_WAND_CFLAGS, MAPIMG_WAND_LIBS
FC_MAPIMG_MAGICKWAND

dnl make it possible to disable the delta network protocol
AC_ARG_ENABLE([delta-protocol],
  AS_HELP_STRING([--disable-delta-protocol],
                 [disable the delta network protocol]),
  [case "${enableval}" in
   yes|no)
     enable_delta_protocol=${enableval} ;;
   *)
     AC_MSG_ERROR([bad value ${enableval} for --enable-delta-protocol]) ;;
   esac],
  [enable_delta_protocol=yes])

AS_IF([test "x$enable_delta_protocol" = "xno"], [
  AC_MSG_WARN([delta network protocol is off])
  AC_MSG_WARN([no network compatibility with regular Freeciv])
  AC_MSG_WARN([won't be able to play with regular Freeciv])],[
  AC_DEFINE([FREECIV_DELTA_PROTOCOL], [1], [Delta protocol enabled])])

dnl done setting arguments for the packet generator
AC_SUBST([GENERATE_PACKETS_ARGS])

FC_WEB_OPTIONS

AC_ARG_ENABLE([fcweb],
  AS_HELP_STRING([--enable-fcweb], [build fcweb version of server [false]]),
[case "${enableval}" in
  yes)
    fcweb=true ;;
  no)
    fcweb=false ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-fcweb]) ;;
esac], [fcweb=false])

FC_WEB_CLIENT

AS_IF([test "x$fcweb" = "xtrue"],
      AC_SUBST([SRVBIN], [freeciv-web]),
      AC_SUBST([SRVBIN], [freeciv-server]))

FC_TESTMATIC

dnl no:   Do not compile client.
dnl auto: Autodetect one.
dnl all:  Autodetect as many as possible.
dnl comma-separated-list: Detect these or abort.
AC_ARG_ENABLE([client],
  AS_HELP_STRING([--enable-client=auto/all/gtk3/gtk3.22/sdl2/qt/stub],
                 [clients to compile [auto](list for multiple)]),
[clients=${enableval}],
[client=auto])

if test "x$fcweb" = "xtrue" && test "x$client" = "xauto" ; then
  clients=no
fi

gui_gtk3=no
gui_gtk3_22=no
gui_gtk3x=no
gui_sdl2=no
gui_qt=no
gui_stub=no

for gui in $(echo $clients | $SED 's/,/ /g') ; do
  if test "x$gui" = "xno" ; then
    client=no
  elif test "x$gui" = "xauto" || test "x$gui" = "xyes" ; then
    client=auto
  elif test "x$gui" = "xall" ; then
    client=all
  else
    if test "x$gui" = "xgtk3"   ||
        test "x$gui" = "xgtk3.0" ||
        test "x$gui" = "xgtk30"  ||
        test "x$gui" = "xgtk-3.0" ; then
      gui_gtk3=yes
    elif test "x$gui" = "xgtk3.22" ; then
      gui_gtk3_22=yes
    elif test "x$gui" = "xgtk3x" ; then
      gui_gtk3x=yes
    elif test "x$gui" = "xgtk" ; then
      AC_MSG_WARN([for requested client 'gtk' enabled gtk3-client, that has changed since earlier versions and will change again in the future])
      gui_gtk3=yes
    else
      if test ! -d "${srcdir}/client/gui-$gui" ; then
        AC_MSG_ERROR(bad value ${gui} for --enable-client)
      fi
      eval "gui_$gui=yes"
    fi
    client=yes
  fi
done

AC_ARG_WITH([zoom],
  [AS_HELP_STRING([--with-zoom], [expose experimental/WIP zoom support on gtk3-clients to user])],
  [AC_DEFINE([GTK3_ZOOM_ENABLED], [1], [Experimental zoom functionality exposed to user])])

AC_ARG_WITH([3d],
  [AS_HELP_STRING([--with-3d], [build WIP 3D support to gtk3.22-client])],
  [AC_DEFINE([GTK3_3D_ENABLED], [1], [3D support built to gtk3.22-client])
   enable_3d=true])

gui_3d_libs=""
if test x$enable_3d = xtrue ; then
  AC_CHECK_LIB([GL], [glBegin], [gui_3d_libs="-lGL"],
               [AC_MSG_ERROR([libGL needed for 3D support not found])])
fi

AC_ARG_ENABLE([gitrev],
  AS_HELP_STRING([--enable-gitrev], [get git revision to version information]),
[case "${enableval}" in
  yes) gitrev=true  ;;
  no)  gitrev=false ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-gitrev]) ;;
esac], [gitrev=false])
AM_CONDITIONAL([GITREV], [test x$gitrev = xtrue])
if test x$gitrev = xtrue ; then
  AC_DEFINE([GITREV], [1], [Get git revision information to version number])
fi

AC_ARG_ENABLE([make_data],
  AS_HELP_STRING([--disable-make-data], [do not recurse make into data directories]),
[case "${enableval}" in
  yes) make_data=true ;;
  no)  make_data=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --disable-make-data) ;;
esac], [make_data=true])
AM_CONDITIONAL(MAKE_DATA, test x$make_data = xtrue)

AC_ARG_ENABLE([make_include],
  AS_HELP_STRING([--enable-make-include], [force make to recurse into include directory]),
[case "${enableval}" in
  yes) make_include=true ;;
  no)  make_include=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-make-include) ;;
esac], [make_include=false])
AM_CONDITIONAL(MAKE_CLIENT_INCLUDE, test "$make_include" = "true")

AC_ARG_WITH([efence],
  AS_HELP_STRING([--with-efence], [use Electric Fence, malloc debugger]),
  WITH_EFENCE=1
)

AC_ARG_ENABLE([aimodules],
  AS_HELP_STRING([--enable-aimodules=yes/no/experimental], [support for ai modules [no]]),
[case "${enableval}" in
  yes) enable_aimodules=yes ;;
  no)  enable_aimodules=no ;;
  experimental) enable_aimodules=yes
                exp_aimodules=yes ;;
  *)   AC_MSG_ERROR([bad value ${enable_aimodules} for --enable-aimodules]) ;;
esac], [enable_aimodules=no])
aimoduledir="${libdir}/fcai"
AC_SUBST(aimoduledir)
AM_CONDITIONAL(AI_MODULES, test "x$enable_aimodules" = "xyes")
if test $enable_aimodules = yes ; then
  if test x$enable_shared != xyes ; then
    AC_MSG_ERROR([cannot enable ai module support if also build of shared libraries is not enabled with --enable-shared])
  fi
  LIBS_TMP="$LIBS"
  LIBS="$LIBS -lltdl"
  AC_MSG_CHECKING([whether can build modules])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <ltdl.h>]],
     [[lt_dlopenext(NULL);]])],
     [AC_MSG_RESULT([yes])],
     [AC_MSG_RESULT([no])
      AC_MSG_ERROR([cannot build loadable AI modules as requested])])
  LIBS="$LIBS_TMP"
  SERVER_LIBS="${SERVER_LIBS} -lltdl"
  AC_DEFINE([AI_MODULES], [1], [Enable ai modules])
  CPPFLAGS="${CPPFLAGS} -DAI_MODULEDIR=\"\\\"${aimoduledir}\\\"\""
  ai_mod_default_needed=yes
fi
AM_CONDITIONAL(EXP_AI_MODULES, test "x$exp_aimodules" = "xyes")

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_DISABLE_SHARED
AM_PROG_AR
if test -z $AR; then
	AC_MSG_ERROR([*** 'ar' missing.  Install binutils, fix your \$PATH, or set \$AR manually. ***])
fi
LT_INIT

AM_PROG_CC_C_O
AC_PROG_CXX
FC_WORKING_CXX
FC_C99_TOKEN_CONCENATION

AC_CHECK_PROG(UNAME,uname,uname,:)

AC_CHECK_SIZEOF([int])

dnl Programs already checked by AM_INIT_AUTOMAKE:
dnl
dnl AC_PROG_MAKE_SET required with automake-ng
AC_PROG_MAKE_SET

dnl Check for libiconv (which is usually included in glibc, but may be
dnl distributed separately).  The libcharset check must come after the
dnl iconv check.  This whole thing must come before the gettext check below.
AM_ICONV
FC_LIBCHARSET
AM_LANGINFO_CODESET
if test "$am_cv_func_iconv" != yes; then
  AC_MSG_ERROR([Iconv is missing. You can get libiconv from http://gnu.org/, \
or try using --with-libiconv-prefix.])
fi
LIBS="$LIBS $LIBICONV"

dnl I18n support
ALL_LINGUAS="ar bg cs ca da de el en_GB eo es et fa fi fr ga gd he hu id it ja 
ko lt nl nb pl pt pt_BR ro ru sr sv tr uk zh_CN zh_TW"
PODOMAINS="freeciv nations ruledit"

AM_GNU_GETTEXT([external], [need-ngettext])

if test "x$USE_NLS" = "xyes" ; then
  AC_DEFINE([FREECIV_ENABLE_NLS], [1], [Native language support enabled])
fi

AM_XGETTEXT_OPTION([--keyword=Q_])
AM_XGETTEXT_OPTION([--keyword=PL_:1,2])
AM_XGETTEXT_OPTION([--language=C])
AM_XGETTEXT_OPTION([--escape])
AM_XGETTEXT_OPTION([--add-comments="TRANS:"])
AM_XGETTEXT_OPTION([--from-code=UTF-8])

PKG_PROG_PKG_CONFIG
if test "x$PKG_CONFIG" = "x" ; then
  AC_MSG_ERROR([pkg-config not found])
fi
PKG_CHECK_MODULES([CURL], [libcurl >= 7.15.4],,
    [AC_MSG_ERROR([libcurl development files required])])
UTILITY_CFLAGS="${UTILITY_CFLAGS} ${CURL_CFLAGS}"
UTILITY_LIBS="${UTILITY_LIBS} ${CURL_LIBS}"

AC_ARG_ENABLE([xml-registry],
  AS_HELP_STRING([--enable-xml-registry], [build xml-backend for registry (WIP)]),
[case "${enableval}" in
  yes) XMLREGISTRY=yes ;;
  no)  XMLREGISTRY=no  ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-xml-registry]) ;;
esac], [XMLREGISTRY=no])

if test "x$XMLREGISTRY" = "xyes" ; then
  PKG_CHECK_MODULES([LIBXML2], [libxml-2.0],,
      [AC_MSG_ERROR([libxml2 development files required])])
  UTILITY_CFLAGS="${UTILITY_CFLAGS} ${LIBXML2_CFLAGS}"
  UTILITY_LIBS="${UTILITY_LIBS} ${LIBXML2_LIBS}"
  AC_DEFINE([FREECIV_HAVE_XML_REGISTRY], [1], [Build xml-backend for registry])
fi

PKG_CHECK_MODULES([ICU], [icu-uc],,
    [AC_MSG_ERROR([icu development files required])])
UTILITY_CFLAGS="${UTILITY_CFLAGS} ${ICU_CFLAGS}"
UTILITY_LIBS="${UTILITY_LIBS} ${ICU_LIBS}"

dnl Set debug flags supported by compiler
EXTRA_DEBUG_CFLAGS=""
EXTRA_DEBUG_CXXFLAGS=""
EXTRA_DEBUG_LDFLAGS=""
dnl check debugging
FC_DEBUG
dnl check profiling
FC_GPROF

FC_C99_VARIADIC_MACROS

AC_C_VARARRAYS
if test "x$ac_cv_c_vararrays" != "xyes" ; then
  AC_MSG_ERROR([A compiler supporting C99 variable arrays is required])
fi

FC_C99_INITIALIZERS
FC_C99_STDINT_H

FC_C99_INITIALIZER_BRACES

FC_C11_STATIC_ASSERT
FC_C11_AT_QUICK_EXIT

FC_STATIC_STRLEN

FC_CXX11_STATIC_ASSERT
FC_CXX11_NULLPTR

dnl BeOS-specific settings
if test x`$UNAME -s` = xBeOS ; then
  AC_DEFINE([FREECIV_SOCKET_ZERO_NOT_STDIN], [1], [BeOS-specific setting])
  CFLAGS="$CFLAGS -Wno-multichar"
  LDFLAGS="$LDFLAGS -x none"
  if test x$enable_debug = xyes ; then
    CFLAGS="$CFLAGS -gdwarf-2"
    LDFLAGS="$LDFLAGS -gdwarf-2"
  fi
  # We used to set ARFLAGS here, but under recent versions of automake this
  # broke compilation on other systems.  Setting ARFLAGS shouldn't be
  # necessary with a working automake.
fi

dnl Defaults to override with host specific values
HOST_PATH_SEPARATOR=":"
HOST_DIR_SEPARATOR="/"

dnl Settings specific to host OS
case "$host_os" in

  *mingw*)
    dnl Windows-specific settings
    AC_CHECK_TOOL([WINDRES], [windres])
    if test -z $WINDRES; then
	  AC_MSG_ERROR([*** 'windres' missing.  Install binutils, fix your \$PATH, or set \$WINDRES manually. ***])
    fi

    HOST_PATH_SEPARATOR=";"
    HOST_DIR_SEPARATOR="\\"

    FREECIV_STORAGE_DIR_ESC=$(echo $FREECIV_STORAGE_DIR | $SED 's,/,\\\\\\\\,g')
    FREECIV_STORAGE_DIR=$(echo $FREECIV_STORAGE_DIR | $SED 's,/,\\\\,g')

    AC_DEFINE([FREECIV_SOCKET_ZERO_NOT_STDIN], [1], [Mingw-specific setting - stdin])
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - Mingw])
    AC_DEFINE([FREECIV_MSWINDOWS], [1], [Windows build])
    AC_DEFINE([NONBLOCKING_SOCKETS], [1], [nonblocking sockets support])
    ;;

  *skyos*)
    dnl SkyOS specific settings
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - SkyOS])
    ;;

  *haiku*)
    dnl Haiku specific settings
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - Haiku])
    LIBS="$LIBS -lnetwork"
    ;;

  *amigaos*)
    AMIGA=yes
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - Amiga])
    ;;

esac

dnl Autoconf provides path separator for build system.
dnl Use that instead of our own guess in case of native build.
dnl Actually; Don't, since at least with autoconf-2.69 msys2 builds got wrong separator this way
dnl if test x$build = x$host ; then
dnl   HOST_PATH_SEPARATOR=$PATH_SEPARATOR
dnl fi

AC_DEFINE_UNQUOTED([FREECIV_STORAGE_DIR], ["$FREECIV_STORAGE_DIR"], [Location for freeciv to store its information])

dnl note this has to match the path installed by translations/*/Makefile
if test x"$MINGW" != "xyes"; then
  CPPFLAGS="$CPPFLAGS -DLOCALEDIR=\"\\\"$localedir\\\"\""
else
  AC_DEFINE_UNQUOTED([LOCALEDIR], [".\\\\share\\\\locale"], [Locale directory (windows)])
fi

CPPFLAGS="$CPPFLAGS -DBINDIR=\"\\\"$bindir\\\"\""

COMMON_LIBS="${COMMON_LIBS} -lm"

dnl Check for zlib
AC_CHECK_LIB([z], [gzgets],
  [AC_DEFINE([FREECIV_HAVE_LIBZ], [1], [zlib is available])
UTILITY_LIBS="${UTILITY_LIBS} -lz"
COMMON_LIBS="$COMMON_LIBS -lz"], 
  AC_MSG_ERROR([Could not find zlib library.]))

AC_CHECK_HEADER(zlib.h, , 
  AC_MSG_ERROR([zlib found but not zlib.h.
You may need to install a zlib devel package.]))

AC_PATH_PROG(GZIP, gzip, "no")
if test "$GZIP" = "no"; then
  AC_MSG_ERROR([You need the gzip program for compilation.])
fi

dnl Check for bzip2 compression
AC_ARG_WITH([libbz2],
  AS_HELP_STRING([--with-libbz2], [support bzip2 compressed files [if possible]]),
[WITH_BZ2="${withval}"],
[WITH_BZ2="test"])

if test "x$WITH_BZ2" != xno ; then
  AC_CHECK_LIB([bz2], [BZ2_bzReadOpen],
    [AC_CHECK_HEADERS([bzlib.h],
     [AC_DEFINE([FREECIV_HAVE_LIBBZ2], [1], [libbzip2 is available])
  UTILITY_LIBS="${UTILITY_LIBS} -lbz2"
  libbz2_available=true])])
  if test "x$libbz2_available" != "xtrue" ; then
    if test "x$WITH_BZ2" = "xyes" ; then
      AC_MSG_ERROR([Could not find libbz2 devel files])
    fi
    feature_bz2=missing
  fi
fi

dnl Check for xz compression
AC_ARG_WITH([liblzma],
  AS_HELP_STRING([--with-liblzma], [support xz compressed files [if possible]]),
[WITH_XZ="${withval}"],
[WITH_XZ="test"])

if test "x$WITH_XZ" != xno ; then
  AC_CHECK_LIB([lzma], [lzma_code],
    [AC_CHECK_HEADERS([lzma.h],
     [AC_DEFINE([FREECIV_HAVE_LIBLZMA], [1], [liblzma is available])
  UTILITY_LIBS="${UTILITY_LIBS} -llzma"
  libxz_available=true])])
  if test "x$libxz_available" != "xtrue" ; then
    if test "x$WITH_XZ" = "xyes" ; then
      AC_MSG_ERROR([Could not find liblzma devel files])
    fi
    feature_xz=missing
  fi
fi

UTILITY_LIBS="${UTILITY_LIBS} ${LTLIBINTL}"

AC_SUBST([UTILITY_CFLAGS])
AC_SUBST([UTILITY_LIBS])
AC_SUBST([COMMON_LIBS])

AC_ARG_ENABLE([crosser],
  AS_HELP_STRING([--enable-crosser], [build version to be used with crosser environment]),
[case "${enableval}" in
  yes) crosser=yes
       AC_DEFINE([CROSSER], [1], [this is crosser based build]) ;;
  no)  crosser=no ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-crosser]) ;;
esac], [crosser=no])
if test x$crosser = xyes && test x$MINGW != xyes ; then
  AC_MSG_ERROR([--enable-crosser is Windows build specific option])
fi

AC_ARG_WITH([tinycthread],
  AS_HELP_STRING([--with-tinycthread], [build and use tinycthread as thread implementation]),
  [fctinycthr=${withval}], [fctinycthr=no])
AM_CONDITIONAL([TINYCTHREAD], [test "x$fctinycthr" = "xyes"])

dnl Check thread implementation
AC_MSG_CHECKING([for threads implementation])
thread_impl=none

CFLAGS_SAVE="${CFLAGS}"
LIBS_SAVE="${LIBS}"

if test "x$fctinycthr" = "xyes" ; then
  AC_DEFINE([FREECIV_HAVE_TINYCTHR], [1], [Use tinycthread as thread implementation])
  thread_impl=tinycthread
  AC_DEFINE([FREECIV_HAVE_THREAD_COND], [1], [Has thread condition variable implementation])
  thread_cond=true

  TINYCTHR_LIBS="\$(top_builddir)/dependencies/tinycthread/libtinycthread.la"
  AC_SUBST([TINYCTHR_LIBS])

  AC_MSG_RESULT([tinycthread])
fi

if test x$crosser != xyes && test "x$thread_impl" = "xnone" ; then
  FC_C_FLAGS([-pthread], [], [CFLAGS])
  FC_LD_FLAGS([-pthread], [], [LIBS])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],
    [[return pthread_create(NULL, NULL, NULL, NULL);]])],
    [AC_DEFINE([FREECIV_HAVE_PTHREAD], [1], [Use pthreads as thread implementation])
    thread_impl=pthreads
    AC_MSG_RESULT([pthreads])
    AC_DEFINE([FREECIV_HAVE_THREAD_COND], [1], [Has thread condition variable implementation])])
    thread_cond=true
fi

if test "x$thread_impl" = "xnone" ; then
  CFLAGS="$CFLAGS_SAVE"
  LDFLAGS="$LDFLAGS_SAVE"

  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <windows.h>]],
    [[CreateThread(NULL, 0, NULL, NULL, 0, NULL);]])],
    [AC_DEFINE([FREECIV_HAVE_WINTHREADS], [1], [Use Windows threads as thread implementation])
    thread_impl=windows
    AC_MSG_RESULT([windows])])
fi

if test "x$thread_impl" = "xnone" ; then
  AC_MSG_ERROR([No usable thread implementation available])
fi

if test "x$thread_cond" != "xtrue" ; then
  feature_thr_cond=missing
fi

AC_ARG_ENABLE([ai-static],
  AS_HELP_STRING([--enable-ai-static], [statically link listed modules to server]),
[static_modules="${enableval}"],
[if test "x$thread_cond" = "xtrue" ; then
  static_modules="classic,tex"
else
  static_modules="classic"
fi])

ai_mod_static_classic=no
ai_mod_static_threaded=no
ai_mod_static_tex=no
ai_mod_static_stub=no

for module in $(echo $static_modules | $SED 's/,/ /g') ; do
  if test "x$module" = "xclassic" ; then
    ai_mod_static_classic=yes
    ai_mod_default_needed=yes
    AC_DEFINE([AI_MOD_STATIC_CLASSIC], [1],
              [classic ai module statically linked])
  elif test "x$module" = "xthreaded" ; then
    ai_mod_static_threaded=yes
    ai_mod_default_needed=yes
    AC_DEFINE([AI_MOD_STATIC_THREADED], [1],
              [threaded ai module statically linked])
  elif test "x$module" = "xtex" ; then
    ai_mod_static_tex=yes
    ai_mod_default_needed=yes
    AC_DEFINE([AI_MOD_STATIC_TEX], [1],
              [experimental threads ai module statically linked])
  elif test "x$module" = "xstub" ; then
    ai_mod_static_stub=yes
    AC_DEFINE([AI_MOD_STATIC_STUB], [1],
              [stub ai module statically linked])
  else
    AC_MSG_ERROR([bad value ${module} for --enable-ai-static])
  fi
  if test "x$default_ai_set" = "x" ; then
    dnl Make first static module default ai type
    default_ai_set="${module}"
  fi
done
AM_CONDITIONAL([AI_MOD_STATIC_CLASSIC],
[test "x$ai_mod_static_classic" = "xyes" || test "x$enable_aimodules" != "xyes"])
AM_CONDITIONAL([AI_MOD_STATIC_THREADED],
[test "x$ai_mod_static_threaded" = "xyes"])
AM_CONDITIONAL([AI_MOD_STATIC_TEX],
[test "x$ai_mod_static_tex" = "xyes"])
AM_CONDITIONAL([AI_MOD_STATIC_STUB],
[test "x$ai_mod_static_stub" = "xyes"])

AC_ARG_WITH([default-ai],
  AS_HELP_STRING([--with-default-ai], [default ai type [first static]]),
  [default_ai_set="${withval}"],
  [])

AC_ARG_WITH([ai-lib],
  AS_HELP_STRING([--with-ai-lib], [build in default AI code [if needed]]),
  [ai_mod_default_needed=yes], [])

AM_CONDITIONAL([AI_MOD_DEFAULT_NEEDED],
[test  "x${ai_mod_default_needed}" = "xyes" || test "x${default_ai_set}" = "x"])

if test "x${default_ai_set}" = "x" ; then
  default_ai_set="classic"
fi

fc_ai_last=0
if test "x$ai_mod_static_classic" = "xyes" ; then
  fc_ai_last=$fc_ai_last+1
fi
if test "x$ai_mod_static_threaded" = "xyes" ; then
  fc_ai_last=$fc_ai_last+1
fi
if test "x$ai_mod_static_tex" = "xyes" ; then
  fc_ai_last=$fc_ai_last+1
fi
if test "x$ai_mod_static_stub" = "xyes" ; then
  fc_ai_last=$fc_ai_last+1
fi
if test "x$enable_aimodules" = "xyes" ; then
  dnl Dynamic modules allowed, give slots for them
  fc_ai_last=$fc_ai_last+3
fi
AC_DEFINE_UNQUOTED([FREECIV_AI_MOD_LAST], [(${fc_ai_last})], [Max number of AI modules])

AC_DEFINE_UNQUOTED([AI_MOD_DEFAULT], ["${default_ai_set}"], [Default ai type name])

dnl Check and choose clients
if test "x$client" != "xno"; then

  dnl Check for sound support, sets SOUND_CFLAGS, SOUND_LIBS, AUDIO_SDL
  dnl Client gui checks need to know which mixer version this has selected
  FC_CHECK_SOUND()

  dnl if need to guess client, announce checking
  if test "x$client" = "xauto"; then
    AS_MESSAGE([checking for which client to compile:...])
  elif test "x$client" = "xall" ; then
    AS_MESSAGE([checking for which clients to compile:...])
  fi

  dnl Gtk-3.22-specific overrides
  FC_GTK3_22_CLIENT

  dnl Gtk-3.0-specific overrides
  FC_GTK3_CLIENT

  dnl QT-specific overrides
  FC_QT_CLIENT

  dnl SDL2-specific overrides
  FC_SDL2_CLIENT

  dnl Gtk-3x-specific overrides
  FC_GTK3X_CLIENT

  dnl Stub-specific overrides
  if test "x$gui_stub" = "xyes" || test "x$client" = "xall" ; then
    gui_stub=yes
    if test "x$client" = "xauto" ; then
      client=yes
    fi
    gui_stub_libs="-lm"
  fi

  dnl If client still "auto", error out since we couldn't select any of them
  if test "x$client" = "xauto" ; then
    AC_MSG_ERROR([can not build any of the supported clients])
  fi
fi

if test "x$client" = "xall" ; then
  if test "x$gui_gtk3" = "xyes" ||
     test "x$gui_gtk3_22" = "xyes" ||
     test "x$gui_gtk3x" = "xyes" ||
     test "x$gui_sdl2" = "xyes" ||
     test "x$gui_qt" = "xyes" ||
     test "x$gui_stub" = "xyes" ; then
    client=yes
  else
    client=no
  fi
fi

FC_LD_FLAGS(["-Wl,-rpath=${lib_prefix}"], [], [LDFLAGS])

AM_CONDITIONAL([CLIENT], [test "x$client" = "xyes"])

AC_ARG_ENABLE([freeciv-manual],
  AS_HELP_STRING([--enable-freeciv-manual], [build freeciv-manual [yes]]),
[case "${enableval}" in
  yes) fcmanual=yes ;;
  no)  fcmanual=no ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-freeciv-manual]) ;;
esac], [fcmanual=yes])

AM_CONDITIONAL([FCMANUAL], [test "x$fcmanual" != "xno"])

AC_ARG_ENABLE([freeciv-ruleup],
  AS_HELP_STRING([--enable-freeciv-ruleup], [build freeciv-ruleup [yes]]),
[case "${enableval}" in
  yes) fcruleup=yes ;;
  no)  fcruleup=no ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-freeciv-ruleup]) ;;
esac], [fcruleup=yes])

AM_CONDITIONAL([FCRULEUP], [test "x$fcruleup" != "xno"])

dnl freeciv-modpack checks
AC_ARG_ENABLE([fcmp],
  AS_HELP_STRING([--enable-fcmp=no/yes/gtk3/gtk3x/qt/cli/all/auto], [build freeciv-modpack-program [auto]]),
[fc_mp=${enableval}],
[fc_mp=auto])

fcmp_cli=no
fcmp_gtk3=no
fcmp_gtk3x=no
fcmp_qt=no
fcmp_list=

if test "x$fc_mp" = "xcli" ; then
  dnl Only cli requested -> no gui needed
  modinst=cli
fi

for mp in $(echo $fc_mp | $SED 's/,/ /g') ; do
  if test "x$mp" = "xno" ; then
    modinst=no
  elif test "x$mp" = "xauto" || test "x$mp" = "xyes" ; then
    modinst=auto
  elif test "x$mp" = "xall" ; then
    modinst=all
  else if test "x$mp" = "xgtk3"   ||
          test "x$mp" = "xgtk3.0" ||
          test "x$mp" = "xgtk30"  ||
          test "x$mp" = "xgtk-3.0" ; then
      req_fcmp_gtk3=yes
    elif test "x$mp" = "xgtk3x" ; then
      req_fcmp_gtk3x=yes
    elif test "x$mp" = "xqt" ; then
      req_fcmp_qt=yes
    elif test "x$mp" = "xcli" ; then
      req_fcmp_cli=yes
    elif test "x$mp" != "xyes" ; then
      AC_MSG_ERROR([bad value ${mp} for --enable-fcmp])
    fi
  fi
done

if test "x$req_fcmp_gtk3" = "xyes" ||
   test "x$modinst" = "xall" || test "x$modinst" = "xauto" ; then
  PKG_CHECK_MODULES([GTK3MP], [gtk+-3.0 >= 3.10.0],
[
  GTK3MP_CFLAGS="$GTK3MP_CFLAGS -DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_3_8 -DGDK_VERSION_MAX_ALLOWED=GDK_VERSION_3_10"
  GTK3MP_CFLAGS="$GTK3MP_CFLAGS -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_36 -DGLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_36"
  PKG_CHECK_MODULES([GTHREAD_GTK3], [gthread-2.0],
[
  fcmp_gtk3=yes
  fcmp_list="$fcmp_list gtk3"
  mp_gtk3_cflags="$GTK3MP_CFLAGS $GTHREAD_GTK3_CFLAGS"
  mp_gtk3_libs="$GTK3MP_LIBS $GTHREAD_GTK3_LIBS"
  if test "x$MINGW" = "xyes"; then
    dnl Required to compile gtk3 on Windows platform
    mp_gtk3_cflags="$mp_gtk3_cflags -mms-bitfields"
    mp_gtk3_ldflags="$mp_gtk3_ldflags -mwindows"
  fi

  if test "x$modinst" = "xauto" ; then
    modinst=found
  fi
], [fcmp_gtk3=no])], [fcmp_gtk3=no])
fi

if test "x$req_fcmp_gtk3" = "xyes" && test "x$fcmp_gtk3" != "xyes" ; then
  AC_MSG_ERROR([Cannot build gtk3-version of freeciv-modpack as requested])
fi

if test "x$req_fcmp_gtk3x" = "xyes" ||
   test "x$modinst" = "xall" || test "x$modinst" = "xauto" ; then
  PKG_CHECK_MODULES([GTK3X_MP], [gtk4 >= 3.96.0],
[
  GTK3X_MP_CFLAGS="$GTK3X_MP_CFLAGS -DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_3_94"
  GTK3X_MP_CFLAGS="$GTK3X_MP_CFLAGS -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_60"
  PKG_CHECK_MODULES([GTHREAD_GTK3X], [gthread-2.0],
[
  fcmp_gtk3x=yes
  fcmp_list="$fcmp_list gtk3x"
  mp_gtk3x_cflags="$GTK3X_MP_CFLAGS $GTHREAD_GTK3X_CFLAGS"
  mp_gtk3x_libs="$GTK3X_MP_LIBS $GTHREAD_GTK3X_LIBS"
  if test "x$MINGW32" = "xyes"; then
    dnl Required to compile gtk4 on Windows platform
    mp_gtk3x_cflags="$mp_gtk3x_cflags -mms-bitfields"
    mp_gtk3x_ldflags="$mp_gtk3x_ldflags -mwindows"
  fi

  if test "x$modinst" = "xauto" ; then
    modinst=found
  fi
], [fcmp_gtk3x=no])], [fcmp_gtk3x=no])
fi

if test "x$req_fcmp_gtk3x" = "xyes" && test "x$fcmp_gtk3x" != "xyes" ; then
  AC_MSG_ERROR([Cannot build gtk3x-version of freeciv-modpack as requested])
fi

if test "x$req_fcmp_qt" = "xyes" ||
   test "x$modinst" = "xauto" || test "x$modinst" = "xall" ; then

   if test "x$cxx_works" = "xyes" ; then
     FC_QT5

     if test "x$fc_qt5_usable" = "xtrue" ; then
       fcmp_qt=yes
       fcmp_list="$fcmp_list qt"

       mp_qt_cppflags=$FC_QT5_CPPFLAGS
       mp_qt_cxxflags=$FC_QT5_CXXFLAGS
       mp_qt_libs=$FC_QT5_LIBS

       if test "x$modinst" = "xauto" ; then
         modinst=found
       fi
     fi
   fi

fi

if test "x$req_fcmp_qt" = "xyes" && test "x$fcmp_qt" != "xyes" ; then
  AC_MSG_ERROR([Cannot build Qt-version of freeciv-modpack as requested])
fi

dnl Cli does not satisfy --enable-fcmp=auto as it's not an gui.
if test "x$req_fcmp_cli" = "xyes" || test "x$modinst" = "xall" ; then
  fcmp_cli=yes
  fcmp_list="$fcmp_list cli"
fi

if test "x$modinst" != "xfound" &&
   test "x$modinst" != "xno" &&
   test "x$modinst" != "xcli" &&
   test "x$fcmp_gtk3" != "xyes" &&
   test "x$fcmp_gtk3x" != "xyes" &&
   test "x$fcmp_qt" != "xyes" ;then
  AC_MSG_ERROR([Cannot build modpack installer with any gui])
fi 

if test "x$modinst" != "xno" && test "x$MINGW" != "xyes" ; then
  dnl Hack to get a run-time icon -- not needed on Windows
  mp_gtk3_cflags="$mp_gtk3_cflags -DMPICON_PATH=\"\\\"$datadir/freeciv/misc/mpicon.png\\\"\""
  mp_gtk3x_cflags="$mp_gtk3x_cflags -DMPICON_PATH=\"\\\"$datadir/freeciv/misc/mpicon.png\\\"\""
fi

if test "x$fcmp_list" = "x" ; then
  fcmp_list="none"
fi

AM_CONDITIONAL([MODINST], [test "x$modinst" != "xno"])
AM_CONDITIONAL([MODINST_GTK3], [test "x$fcmp_gtk3" = "xyes"])
AM_CONDITIONAL([MODINST_GTK3X], [test "x$fcmp_gtk3x" = "xyes"])
AM_CONDITIONAL([MODINST_QT], [test "x$fcmp_qt" = "xyes"])
AM_CONDITIONAL([MODINST_CLI], [test "x$fcmp_cli" = "xyes"])

AC_ARG_ENABLE([ruledit],
  AS_HELP_STRING([--enable-ruledit], [build freeciv-ruledit (WIP)]),
[case "${enableval}" in
  yes)  ruledit=yes ;;
  no)   ruledit=no ;;
  test) ruledit=test ;;
  experimental)
        AC_DEFINE([RULEDIT_EXPERIMENTAL], [1], [build experimental features to freeciv-ruledit])
        ruledit=yes ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-ruledit]) ;;
esac], [ruledit=test])
if test "x$ruledit" = "xyes" || test "x$ruledit" = "xtest" ; then
  if test "x$cxx_works" = "xyes" ; then
    FC_QT5

    if test "x$fc_qt5_usable" = "xtrue" ; then
      ruledit_cppflags=$FC_QT5_CPPFLAGS
      ruledit_cxxflags=$FC_QT5_CXXFLAGS
      ruledit_libs=$FC_QT5_LIBS
      ruledit=yes
    elif test "x$ruledit" = "xyes" ; then
      AC_MSG_ERROR([Qt5 not found for building freeciv-ruledit])
    fi
  elif test "x$ruledit" = "xyes" ; then
    AC_MSG_ERROR([No working C++ compiler found for building freeciv-ruledit])
  fi
fi
if test "x$ruledit" = "xtest" ; then
  dnl Still not set to 'yes' so failed tests
  ruledit=no
  feature_ruledit=missing
fi
AM_CONDITIONAL([RULEDIT], [test "x$ruledit" = "xyes"])

AM_CONDITIONAL([SRV_LIB],
  [test "x$server" = "xyes" || test "x$fcmanual" = "xyes" || test "x$ruledit" = "xyes" || test "x$fcruleup" = "xyes"])

AC_SUBST([gui_3d_libs])
AC_SUBST([gui_gtk3_cflags])
AC_SUBST([gui_gtk3_libs])
AC_SUBST([gui_gtk3_ldflags])
AC_SUBST([gui_gtk3_22_cflags])
AC_SUBST([gui_gtk3_22_libs])
AC_SUBST([gui_gtk3_22_ldflags])
AC_SUBST([gui_gtk3x_cflags])
AC_SUBST([gui_gtk3x_libs])
AC_SUBST([gui_gtk3x_ldflags])
AC_SUBST([gui_sdl2_cflags])
AC_SUBST([gui_sdl2_libs])
AC_SUBST([gui_sdl2_ldflags])
AC_SUBST([gui_qt_cppflags])
AC_SUBST([gui_qt_cflags])
AC_SUBST([gui_qt_cxxflags])
AC_SUBST([gui_qt_libs])
AC_SUBST([gui_qt_ldflags])
AC_SUBST([gui_stub_cflags])
AC_SUBST([gui_stub_libs])
AC_SUBST([gui_stub_ldflags])
AC_SUBST([mp_cli_cflags])
AC_SUBST([mp_cli_libs])
AC_SUBST([mp_cli_ldflags])
AC_SUBST([mp_gtk3_cflags])
AC_SUBST([mp_gtk3_libs])
AC_SUBST([mp_gtk3_ldflags])
AC_SUBST([mp_gtk3x_cflags])
AC_SUBST([mp_gtk3x_libs])
AC_SUBST([mp_gtk3x_ldflags])
AC_SUBST([mp_qt_cppflags])
AC_SUBST([mp_qt_cxxflags])
AC_SUBST([mp_qt_libs])
AC_SUBST([ruledit_cppflags])
AC_SUBST([ruledit_cxxflags])
AC_SUBST([ruledit_libs])
AC_SUBST([SOUND_CFLAGS])
AC_SUBST([SOUND_LIBS])
AC_SUBST([VERSION_LABEL])
AC_SUBST([HOST_PATH_SEPARATOR])
AC_SUBST([HOST_DIR_SEPARATOR])
AC_SUBST([FREECIV_STORAGE_DIR])
AM_CONDITIONAL(AUDIO_SDL, test "x$SDL_mixer" != "xno")
AM_CONDITIONAL(CLIENT_GUI_SDL2, test "x$gui_sdl2" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_GTK_3_0, test "x$gui_gtk3" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_GTK_3_22, test "x$gui_gtk3_22" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_GTK_3X, test "x$gui_gtk3x" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_QT, test "x$gui_qt" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_STUB, test "x$gui_stub" = "xyes")
AM_CONDITIONAL(MINGW, test x"$MINGW" = "xyes")

dnl Additional client libraries:
if test "x$client" = "xyes"; then
    CLIENT_LIBS=" -lm "
    AC_SUBST(CLIENT_LIBS)
fi

dnl Checks for additional server libraries:
if test "x$server" = "xyes"; then
    SERVER_LIBS="-lm ${SERVER_LIBS}"

    dnl Some systems (e.g., BeOS) need this lib
    AC_CHECK_LIB(bind, gethostbyaddr, SERVER_LIBS="-lbind $SERVER_LIBS")

    dnl Readline library and header files.
    FC_HAS_READLINE()
    AC_SUBST([SERVER_LIBS])
    AC_SUBST([SRV_LIB_LIBS])
fi

AC_CHECK_LIB(nls,main)

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([fcntl.h sys/utsname.h \
                  sys/file.h signal.h strings.h execinfo.h \
                  libgen.h])
AC_CHECK_HEADERS([sys/time.h], [AC_DEFINE([FREECIV_HAVE_SYS_TIME_H], [1], [sys/time.h available])])
AC_CHECK_HEADERS([unistd.h], [AC_DEFINE([FREECIV_HAVE_UNISTD_H], [1], [unistd.h available])])
AC_CHECK_HEADERS([locale.h], [AC_DEFINE([FREECIV_HAVE_LOCALE_H], [1], [locale.h available])])
AC_CHECK_HEADERS([libintl.h], [AC_DEFINE([FREECIV_HAVE_LIBINTL_H], [1], [libint.h available])])
AC_CHECK_HEADERS([dirent.h], [AC_DEFINE([FREECIV_HAVE_DIRENT_H], [1], [dirent.h available])])
AC_HEADER_STDBOOL
if test $ac_cv_header_stdbool_h = yes; then
  AC_DEFINE([FREECIV_HAVE_STDBOOL_H], [1], [Have standard compliant stdbool.h])
fi

AC_CHECK_HEADERS([pwd.h])

AC_CHECK_FUNCS([opendir], [
  AC_DEFINE([FREECIV_HAVE_OPENDIR], [1], [opendir() available])])

dnl Avoid including the unix emulation layer if we build mingw executables
dnl There would be type conflicts between winsock and bsd/unix includes
if test "x$MINGW" != "xyes"; then
  AC_CHECK_HEADERS([arpa/inet.h netdb.h sys/ioctl.h \
                    sys/signal.h sys/termio.h \
                    sys/uio.h termios.h])
  AC_CHECK_HEADERS([sys/select.h], [AC_DEFINE([FREECIV_HAVE_SYS_SELECT_H], [1], [sys/select.h available])])
  AC_CHECK_HEADERS([netinet/in.h], [AC_DEFINE([FREECIV_HAVE_NETINET_IN_H], [1], [netinet/in.h available])])
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPES([socklen_t], [AC_DEFINE([FREECIV_HAVE_SOCKLEN_T], [1], [Have socklen_t type defined])],
[],
[#ifdef FREECIV_HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef FREECIV_HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef FREECIV_HAVE_WS2TCPIP_H
#include <ws2tcpip.h>
#endif
])
AC_TYPE_INTPTR_T
dnl Headers that might contain the intptr_t definition found earlier
AC_CHECK_HEADERS([inttypes.h],
  [AC_DEFINE([FREECIV_HAVE_INTTYPES_H], [1], [inttypes.h available])])
AC_CHECK_HEADERS([stdint.h],
  [AC_DEFINE([FREECIV_HAVE_STDINT_H], [1], [stdint.h available])])

dnl Checks for library functions.
AC_FUNC_FORK
AC_FUNC_STRCOLL
AC_FUNC_VPRINTF
AC_FUNC_FSEEKO

dnl Windows vsnprintf doesn't support argument reordering (see PR#12932)
if test "x$MINGW" != "xyes"; then
dnl The use of both FC_FUNC_VSNPRINTF and AC_CHECK_FUNCS(vsnprintf) is
dnl deliberate.
FC_FUNC_VSNPRINTF
AC_CHECK_FUNCS([vsnprintf])
fi

AC_CHECK_FUNCS([bind connect fileno flock ftime gethostbyname gethostname \
		getpwuid inet_aton select snooze strcasestr \
		strerror strstr uname usleep \
                getline _strcoll stricoll _stricoll strcasecoll \
                backtrace setenv putenv])

dnl Possible "-Wmissing-declarations" and "-Werror" will prune out
dnl cases where we should not use _mkdir() even if it's possible to link against it
fc_save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -Werror $EXTRA_DEBUG_CFLAGS"
AC_CHECK_FUNCS([_mkdir])
CPPFLAGS="$fc_save_CPPFLAGS"

AC_MSG_CHECKING(for working gettimeofday)
  FC_CHECK_GETTIMEOFDAY_RUNTIME(,AC_DEFINE([HAVE_GETTIMEOFDAY], [1],
	[Define if the gettimeofday function works and is sane.]),)

AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netinet/in.h>]],
[[struct ip_mreqn req; req.imr_ifindex = 0;]])],
[AC_DEFINE([HAVE_IP_MREQN], [1], [struct ip_mreqn available])])

dnl Check for extra socket libraries.
dnl If the AC_CHECK_FUNCS check finds the function, we don't look any
dnl further.  This is rumoured to prevent choosing the wrong libs on IRIX.
if test $ac_cv_func_gethostbyname = no; then
  AC_CHECK_LIB(nsl, gethostbyname, LIBS="-lnsl $LIBS")
fi
if test $ac_cv_func_connect = no; then
  AC_CHECK_LIB(socket, connect, LIBS="-lsocket $LIBS")
fi
if test $ac_cv_func_bind = no; then
  AC_CHECK_LIB(bind, gethostbyaddr, LIBS="-lbind $LIBS")
fi

dnl Windows fdopen does not work with sockets.
if test "x$MINGW" != "xyes"; then
  AC_CHECK_FUNCS(fdopen)
fi

dnl We would AC_CHECK_FUNCS for socket as well, except it is complicated
dnl by the fact that the -lsocket is in X_EXTRA_LIBS and/or SERVER_LIBS,
dnl and not in LIBS.

dnl Now check if non blocking sockets are possible
dnl (if fcntl or ioctl exists)

AC_CHECK_FUNC([fcntl],
              [AC_DEFINE([HAVE_FCNTL], [1], [fcntl support])
               AC_DEFINE([NONBLOCKING_SOCKETS], [1], [nonblocking sockets support])],
               [AC_CHECK_FUNC([ioctl], 
                             [AC_DEFINE([HAVE_IOCTL], [1], [ioctl support])
                              AC_DEFINE([NONBLOCKING_SOCKETS], [1], [nonblocking sockets support])])])

dnl Checks if SIGPIPE is usable
AC_MSG_CHECKING([for SIGPIPE])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]], [[signal (SIGPIPE, SIG_IGN)]])],[AC_MSG_RESULT([yes])
                AC_DEFINE([HAVE_SIGPIPE], [1], [sigpipe support])],[AC_MSG_RESULT([no])])

dnl export where the datadir is going to be installed
FC_EXPAND_DIR(FREECIV_DATADIR, "$datadir/freeciv")

if test x"$MINGW" = xyes; then
  DEFAULT_SAVE_PATH=".;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\saves"
  if test x$crosser = xyes ; then
    FC_CONF_PATH="..\\\\\\\\etc\\\\\\\\freeciv"
    DEFAULT_DATA_PATH=".;data;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\$DATASUBDIR;$datadir\\\\\\\\freeciv;..\\\\\\\\share\\\\\\\\freeciv"
    DEFAULT_SCENARIO_PATH=".;data\\\\\\\\scenarios;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\$DATASUBDIR\\\\\\\\scenarios;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\scenarios;$datadir\\\\\\\\freeciv\\\\\\\\scenarios;..\\\\\\\\share\\\\\\\\freeciv\\\\\\\\scenarios"
  else
    FC_CONF_PATH="etc\\\\\\\\freeciv"
    DEFAULT_DATA_PATH=".;data;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\$DATASUBDIR;$datadir\\\\\\\\freeciv"
    DEFAULT_SCENARIO_PATH=".;data\\\\\\\\scenarios;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\$DATASUBDIR\\\\\\\\scenarios;${FREECIV_STORAGE_DIR_ESC}\\\\\\\\scenarios;$datadir\\\\\\\\freeciv\\\\\\\\scenarios"
  fi
else
  FC_CONF_PATH="$sysconfdir/freeciv"
  DEFAULT_DATA_PATH=".:data:$FREECIV_STORAGE_DIR/$DATASUBDIR:$datadir/freeciv"
  DEFAULT_SAVE_PATH=".:$FREECIV_STORAGE_DIR/saves"
  DEFAULT_SCENARIO_PATH=".:data/scenarios:$FREECIV_STORAGE_DIR/$DATASUBDIR/scenarios:$FREECIV_STORAGE_DIR/scenarios:$datadir/freeciv/scenarios"
fi
CPPFLAGS="$CPPFLAGS -DFC_CONF_PATH=\"\\\"$FC_CONF_PATH\\\"\""
CPPFLAGS="$CPPFLAGS -DDEFAULT_DATA_PATH=\"\\\"$DEFAULT_DATA_PATH\\\"\""
CPPFLAGS="$CPPFLAGS -DDEFAULT_SAVE_PATH=\"\\\"$DEFAULT_SAVE_PATH\\\"\""
CPPFLAGS="$CPPFLAGS -DDEFAULT_SCENARIO_PATH=\"\\\"$DEFAULT_SCENARIO_PATH\\\"\""

dnl This has to be last library
if test -n "$WITH_EFENCE"; then
  AC_CHECK_LIB(efence, malloc, [ 
  if test "x$LIBS" = "x"; then
    LIBS = -lefence
  else
    LIBS="$LIBS -lefence"
  fi])
fi

AC_ARG_ENABLE([sys-lua],
  AS_HELP_STRING([--enable-sys-lua], [use lua from system instead of one from freeciv tree [test]]),
[case "${enableval}" in
  yes)
    sys_lua=true ;;
  no)
    sys_lua=false ;;
  test)
    sys_lua=test ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-sys-lua]) ;;
esac], [sys_lua=test])

dnl There's wide divergence on what the pkg-config file for Lua is called
dnl See http://lua-users.org/lists/lua-l/2008-09/msg00184.html
if test "x$sys_lua" = "xtrue" || test "x$sys_lua" = "xtest" ; then
  PKG_CHECK_MODULES([LUA], [lua5.4], [sys_lua=true],
    [PKG_CHECK_MODULES([LUA], [lua-5.4], [sys_lua=true],
      [PKG_CHECK_MODULES([LUA], [lua >= 5.4 lua < 5.5], [sys_lua=true],
[if test "x$sys_lua" = "xtrue" ; then
  AC_MSG_ERROR([Use of included lua disabled, and no lua found from system])
fi
feature_syslua=missing
sys_lua=false])])])
fi

if test "x$sys_lua" != "xtrue" ; then
  dnl Checks needed for included lua.
  gl_FUNC_MKSTEMP
  if test "x$gl_cv_func_working_mkstemp" = xyes ; then
    dnl if only "guessing yes", do not try to use mkstemp, but fallback
    AC_DEFINE([HAVE_MKSTEMP], [1], [Have working mkstemp])
  fi
  AC_CHECK_FUNCS([popen pclose _longjmp _setjmp gmtime_r localtime_r])

  LUA_CFLAGS="-I\$(top_srcdir)/dependencies/lua-5.4/src"
  LUA_LIBS="\$(top_builddir)/dependencies/lua-5.4/src/liblua.la"
fi

AC_SUBST([LUA_CFLAGS])
AC_SUBST([LUA_LIBS])
AM_CONDITIONAL([SYS_LUA], [test "x$sys_lua" = "xtrue"])

if test x$enable_fcdb = xyes ; then
  LUASQL_CFLAGS="-I\$(top_srcdir)/dependencies/luasql/src"
  LUASQL_LIBS="\$(top_builddir)/dependencies/luasql/src/libluasql_base.la"
  if test x$fcdb_mysql = xyes ; then
    LUASQL_LIBS="$LUASQL_LIBS \$(top_builddir)/dependencies/luasql/src/libluasql_mysql.la"
  fi
  if test x$fcdb_odbc = xyes ; then
    LUASQL_LIBS="$LUASQL_LIBS \$(top_builddir)/dependencies/luasql/src/libluasql_odbc.la"
  fi
  if test x$fcdb_postgres = xyes ; then
    LUASQL_LIBS="$LUASQL_LIBS \$(top_builddir)/dependencies/luasql/src/libluasql_postgres.la"
  fi
  if test x$fcdb_sqlite3 = xyes ; then
    LUASQL_LIBS="$LUASQL_LIBS \$(top_builddir)/dependencies/luasql/src/libluasql_sqlite3.la"
  fi
  LUASQL_AS_DEPENDENCY="$LUASQL_LIBS"
  LUASQL_LIBS="$LUASQL_LIBS $FCDB_MYSQL_LIBS $FCDB_POSTGRES_LIBS $FCDB_SQLITE3_LIBS"

  AC_SUBST([LUASQL_CFLAGS])
  AC_SUBST([LUASQL_LIBS])
  AC_SUBST([LUASQL_AS_DEPENDENCY])
fi

AC_ARG_ENABLE([sys-tolua-cmd],
  AS_HELP_STRING([--enable-sys-tolua-cmd], [use tolua command from build system instead of one from freeciv tree [true when cross-compiling]]),
[case "${enableval}" in
  yes)
    sys_tolua_cmd=true ;;
  no)
    if test "x$cross_compiling" = "xyes" ; then
      AC_MSG_ERROR([Must use external build system tolua command when cross-compiling])
    fi
    sys_tolua_cmd=false ;;
  *)
    sys_tolua_cmd=${enableval} ;;
esac], [
if test "x$cross_compiling" = "xyes" ; then
  sys_tolua_cmd=true
else
  sys_tolua_cmd=test
fi])

if test "x$sys_tolua_cmd" = "xtrue" || test "x$sys_tolua_cmd" = "xtest" ; then
  AC_PATH_PROG([TOLUA], [tolua], [notfound])
  if test "x$TOLUA" = "xnotfound" ; then
    if test "x$sys_tolua_cmd" = "xtest" ; then
      TOLUA="\$(top_builddir)/dependencies/tolua-5.2/src/bin/tolua$EXEEXT"
      sys_tolua_cmd=false
    else
      AC_MSG_WARN([tolua command not found])
      TOLUA="unavailable"
    fi
    feature_systolua_cmd=missing
  else
    sys_tolua_cmd="true"
  fi
elif test "x$sys_tolua_cmd" != "xfalse" ; then
  TOLUA=$sys_tolua_cmd
else
  TOLUA="\$(top_builddir)/dependencies/tolua-5.2/src/bin/tolua$EXEEXT"
fi

AC_SUBST([TOLUA])

TOLUA_CFLAGS="-I\$(top_srcdir)/dependencies/tolua-5.2/include"
TOLUA_LIBS="\$(top_builddir)/dependencies/tolua-5.2/src/lib/libtolua.la"
AC_SUBST([TOLUA_CFLAGS])
AC_SUBST([TOLUA_LIBS])

AM_CONDITIONAL([SYS_TOLUA_CMD], [test "x$sys_tolua_cmd" != "xfalse"])

dnl The BeOS sys/uio.h is broken.  This kludges it out of existence.
dnl (This still causes lots of spurious changes to fc_config.h on BeOS.)
AC_CONFIG_COMMANDS([fc_default-5],[[if test x`uname -s` = xBeOS ; then
     if grep '#define HAVE_SYS_UIO_H 1' fc_config.h >/dev/null 2>&1 ; then
       echo kluging fc_config.h
       mv -f fc_config.h fc_config.h.tmp
       sed -e 's/#define HAVE_SYS_UIO_H 1/#undef HAVE_SYS_UIO_H/g' fc_config.h.tmp > fc_config.h
       rm fc_config.h.tmp
     fi
   fi]],[[]])

CFLAGS="$EXTRA_DEBUG_CFLAGS $CFLAGS"
CXXFLAGS="$EXTRA_DEBUG_CXXFLAGS $CXXFLAGS"
LDFLAGS="$EXTRA_DEBUG_LDFLAGS $LDFLAGS"

dnl Rebuild 'configure' whenever fc_version changes, if maintainer mode enabled.
AC_SUBST([CONFIGURE_DEPENDENCIES], ["$CONFIGURE_DEPENDENCIES \$(top_srcdir)/fc_version"])
AC_SUBST([CONFIG_STATUS_DEPENDENCIES], ["${project_definition_dyn_rel}"])

dnl Make sure that fc_config.h changes when ever CPPFLAGS, CFLAGS or CXXFLAGS
dnl change so everything gets rebuilt. LDFLAGS is not handled here
dnl since change in it should not cause recompilation, only relinking.
dnl Note: Variables are named FC_STORE_* instead of FC_*_STORE in order to
dnl make them appear next to each other in fc_config.h.
FC_STORE_CPPFLAGS="$(echo $CPPFLAGS | $SED 's/\\/\\\\/g' | $SED 's/\"/\\\"/g')"
AC_DEFINE_UNQUOTED([FC_STORE_CPPFLAGS], ["$FC_STORE_CPPFLAGS"],
                   [These are the CPPFLAGS used in compilation])
FC_STORE_CFLAGS="$(echo $CFLAGS | $SED 's/\\/\\\\/g' | $SED 's/\"/\\\"/g')"
AC_DEFINE_UNQUOTED([FC_STORE_CFLAGS], ["$FC_STORE_CFLAGS"],
                   [These are the CFLAGS used in compilation])
FC_STORE_CXXFLAGS="$(echo $CXXFLAGS | $SED 's/\\/\\\\/g' | $SED 's/\"/\\\"/g')"
AC_DEFINE_UNQUOTED([FC_STORE_CXXFLAGS], ["$FC_STORE_CXXFLAGS"],
                   [These are the CXXFLAGS used in compilation])

dnl If old default of AR_FLAGS is otherwise being used (because of older automake),
dnl replace it with one without 'u'
if test "x$AR_FLAGS" = "xcru" ; then
  AR_FLAGS="cr"
fi

AC_CONFIG_FILES([Makefile
          data/Makefile
	  data/hex2t/Makefile
          data/hexemplio/Makefile
	  data/amplio2/Makefile
          data/alio/Makefile
	  data/buildings/Makefile
	  data/flags/Makefile
	  data/misc/Makefile
	  data/cimpletoon/Makefile
	  data/trident/Makefile
	  data/isophex/Makefile
	  data/isotrident/Makefile
	  data/stdsounds/Makefile
          data/stdmusic/Makefile
          data/override/Makefile
	  data/default/Makefile
	  data/classic/Makefile
	  data/multiplayer/Makefile
	  data/sandbox/Makefile
          data/alien/Makefile
          data/civ2civ3/Makefile
	  data/civ1/Makefile
	  data/civ2/Makefile
	  data/scenarios/Makefile
	  data/nation/Makefile
          data/ruledit/Makefile
	  data/themes/Makefile
	  data/themes/gtk3/Makefile
	  data/themes/gtk3/Freeciv/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Arrows/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Buttons/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Check-Radio/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Combo/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Frame-Gap/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Handles/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Lines/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/ListHeaders/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Menu-Menubar/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Others/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Panel/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/ProgressBar/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Range/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Scrollbars/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Shadows/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Spin/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Tabs/Makefile
	  data/themes/gtk3/Freeciv/gtk-3.0/Toolbar/Makefile
	  data/themes/gtk3.22/Makefile
	  data/themes/gtk3.22/Freeciv/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Arrows/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Buttons/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Check-Radio/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Combo/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Frame-Gap/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Handles/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Lines/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/ListHeaders/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Menu-Menubar/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Others/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Panel/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/ProgressBar/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Range/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Scrollbars/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Shadows/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Spin/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Tabs/Makefile
	  data/themes/gtk3.22/Freeciv/gtk-3.0/Toolbar/Makefile
	  data/themes/gui-qt/Makefile
	  data/themes/gui-qt/icons/Makefile
	  data/themes/gui-qt/Classic/Makefile
	  data/themes/gui-qt/Necrophos/Makefile
	  data/themes/gui-qt/NightStalker/Makefile
	  data/themes/gui-qt/System/Makefile
	  data/themes/gui-sdl2/Makefile
	  data/themes/gui-sdl2/human/Makefile
	  data/wonders/Makefile
	  data/icons/Makefile
	  utility/Makefile
	  dependencies/Makefile
	  dependencies/lua-5.4/Makefile
          dependencies/lua-5.4/src/Makefile
	  dependencies/tolua-5.2/Makefile
	  dependencies/tolua-5.2/src/Makefile
	  dependencies/tolua-5.2/src/lib/Makefile
          dependencies/tolua-5.2/src/bin/Makefile
          dependencies/luasql/Makefile
          dependencies/luasql/src/Makefile
          dependencies/cvercmp/Makefile
          dependencies/tinycthread/Makefile
	  common/Makefile
          common/aicore/Makefile
          common/networking/Makefile
          common/scriptcore/Makefile
	  ai/Makefile
          ai/default/Makefile
          ai/classic/Makefile
          ai/stub/Makefile
          ai/threaded/Makefile
          ai/tex/Makefile
	  tests/Makefile
  	  windows/Makefile
	  client/Makefile
	  client/agents/Makefile
	  client/include/Makefile
          client/gui-sdl2/Makefile
	  client/gui-gtk-3.0/Makefile
	  client/gui-gtk-3.22/Makefile
          client/gui-gtk-4.0/Makefile
          client/gui-qt/Makefile
	  client/gui-stub/Makefile
          client/luascript/Makefile
	  server/Makefile
          server/advisors/Makefile
	  server/generator/Makefile
          server/savegame/Makefile
	  server/scripting/Makefile
          tools/Makefile
          tools/fcmp/Makefile
          tools/ruledit/Makefile
          tools/ruleutil/Makefile
          tools/shared/Makefile
          gen_headers/Makefile
          translations/Makefile
	  translations/core/Makefile.in
	  translations/nations/Makefile.in
          translations/ruledit/Makefile.in
	  doc/Makefile
	  doc/man/Makefile
          doc/man/freeciv-client.6
          doc/man/freeciv-server.6
          doc/man/freeciv-manual.6
	  doc/man/freeciv-modpack.6
	  doc/man/freeciv-ruledit.6
          doc/man/freeciv-ruleup.6
	  doc/ca/Makefile
	  doc/de/Makefile
	  doc/fr/Makefile
	  doc/it/Makefile
	  doc/ja/Makefile
	  doc/nl/Makefile
	  doc/sv/Makefile
          bootstrap/Makefile
          lua/Makefile
          client/freeciv.desktop:bootstrap/freeciv.desktop.in
          client/freeciv-gtk3.22.desktop:bootstrap/freeciv-gtk3.22.desktop.in
          client/freeciv-sdl2.desktop:bootstrap/freeciv-sdl2.desktop.in
          client/freeciv-qt.desktop:bootstrap/freeciv-qt.desktop.in
	  server/freeciv-server.desktop:bootstrap/freeciv-server.desktop.in
	  tools/fcmp/freeciv-mp-gtk3.desktop:bootstrap/freeciv-mp-gtk3.desktop.in
	  tools/fcmp/freeciv-mp-qt.desktop:bootstrap/freeciv-mp-qt.desktop.in
	  tools/ruledit/freeciv-ruledit.desktop:bootstrap/freeciv-ruledit.desktop.in
          client/freeciv-gtk3.appdata.xml:bootstrap/freeciv-gtk3.appdata.xml.in
          client/freeciv-gtk3.22.appdata.xml:bootstrap/freeciv-gtk3.22.appdata.xml.in
          client/freeciv-sdl2.appdata.xml:bootstrap/freeciv-sdl2.appdata.xml.in
          client/freeciv-qt.appdata.xml:bootstrap/freeciv-qt.appdata.xml.in
          server/freeciv-server.appdata.xml:bootstrap/freeciv-server.appdata.xml.in
          tools/fcmp/freeciv-mp-gtk3.appdata.xml:bootstrap/freeciv-mp-gtk3.appdata.xml.in
          tools/fcmp/freeciv-mp-qt.appdata.xml:bootstrap/freeciv-mp-qt.appdata.xml.in
          tools/ruledit/freeciv-ruledit.appdata.xml:bootstrap/freeciv-ruledit.appdata.xml.in])
AC_CONFIG_FILES([fcgui:bootstrap/fcgui.in], [chmod +x fcgui])
AC_CONFIG_FILES([fcser:bootstrap/fcser.in], [chmod +x fcser])
AC_CONFIG_FILES([fcruleup:bootstrap/fcruleup.in], [chmod +x fcruleup])
if test "x$ruledit" = "xyes" ; then
  AC_CONFIG_FILES([fcruledit:bootstrap/fcruledit.in], [chmod +x fcruledit])
fi
AC_CONFIG_FILES([tests/rulesets_not_broken.sh], [chmod +x tests/rulesets_not_broken.sh])
AC_CONFIG_FILES([tests/rs_test_res/ruleset_loads.sh],
                [chmod +x tests/rs_test_res/ruleset_loads.sh])

AC_OUTPUT

AS_IF([test "x$json_enabled" = "xyes"],
      [protocol="JSON"], [protocol="binary"])

AS_IF([test "x$enable_delta_protocol" = "xno"],
      [protocol="$protocol verbose"],
      [protocol="$protocol delta"])

AC_MSG_NOTICE([
****************** Configuration Summary ******************

  == General build options ==
  Shared libraries:      $enable_shared
  Debugging support:     $enable_debug
  Profiling support:     $enable_gprof
  IPv6 support:          $enable_ipv6
  Map image toolkits:    $enable_mapimg
    ppm:                   built-in
    MagickWand:            $mapimg_magickwand

  == Client ==
  Build freeciv client:  $client

  Maintained client frontends:
    Gtk-3.22 $gui_gtk3_22
    Gtk-3.0: $gui_gtk3
    SDL2:    $gui_sdl2
    QT:      $gui_qt
    Stub:    $gui_stub

  In-development client frontends:
   (these are not yet ready for general use)
    Gtk-3x:  $gui_gtk3x

  == Server ==
  Build freeciv server:  $server
    AI modules support:    $enable_aimodules
    Database support:      $enable_fcdb
      mysql:                 $fcdb_mysql
      odbc:                  $fcdb_odbc
      postgres:              $fcdb_postgres
      sqlite3:               $fcdb_sqlite3

  == Tools ==
  Modpack installers:   $fcmp_list
  Ruleset editor:        $ruledit
  Ruleset updater:       $fcruleup
  Manual generator:      $fcmanual

  == Gotchas ==
  Network protocol: $protocol (binary delta is the safe choice)
])

FC_MISSING_FEATURES
